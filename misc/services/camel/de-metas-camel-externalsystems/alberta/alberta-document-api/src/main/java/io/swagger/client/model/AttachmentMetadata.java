/*
 * Dokumente - Warenwirtschaft (Basis)
 * Synchronisation der Dokumente aus Alberta
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.math.BigDecimal;
import java.util.Objects;
/**
 * AttachmentMetadata
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-17T14:20:17.484Z[GMT]")
public class AttachmentMetadata {
  @SerializedName("type")
  private BigDecimal type = null;

  @SerializedName("therapyId")
  private BigDecimal therapyId = null;

  @SerializedName("therapyTypeId")
  private BigDecimal therapyTypeId = null;

  @SerializedName("woundLocation")
  private BigDecimal woundLocation = null;

  @SerializedName("patientId")
  private String patientId = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("archived")
  private Boolean archived = null;

  public AttachmentMetadata type(BigDecimal type) {
    this.type = type;
    return this;
  }

   /**
   * Art der Anlage
   * @return type
  **/
  @Schema(description = "Art der Anlage")
  public BigDecimal getType() {
    return type;
  }

  public void setType(BigDecimal type) {
    this.type = type;
  }

  public AttachmentMetadata therapyId(BigDecimal therapyId) {
    this.therapyId = therapyId;
    return this;
  }

   /**
   * Therapie, zu der die Anlage gehört (0&#x3D; Unbekannt, 1 &#x3D; Parenterale Ernährung, 2 &#x3D; Enterale Ernährung, 3 &#x3D; Stoma, 4 &#x3D; Tracheostoma, 5 &#x3D; Inkontinenz ableitend, 6 &#x3D; Wundversorgung, 7 &#x3D; IV-Therapien, 8 &#x3D; Beatmung, 9 &#x3D; Sonstiges, 10 &#x3D; OSA, 11 &#x3D; Hustenhilfen, 12 &#x3D; Absaugung, 13 &#x3D; Patientenüberwachung, 14 &#x3D; Sauerstoff, 15 &#x3D; Inhalations- und Atemtherapie, 16 &#x3D; Lagerungshilfsmittel, 17 &#x3D; Immuntherapie, 18 &#x3D; Rehydration)
   * @return therapyId
  **/
  @Schema(example = "3", description = "Therapie, zu der die Anlage gehört (0= Unbekannt, 1 = Parenterale Ernährung, 2 = Enterale Ernährung, 3 = Stoma, 4 = Tracheostoma, 5 = Inkontinenz ableitend, 6 = Wundversorgung, 7 = IV-Therapien, 8 = Beatmung, 9 = Sonstiges, 10 = OSA, 11 = Hustenhilfen, 12 = Absaugung, 13 = Patientenüberwachung, 14 = Sauerstoff, 15 = Inhalations- und Atemtherapie, 16 = Lagerungshilfsmittel, 17 = Immuntherapie, 18 = Rehydration)")
  public BigDecimal getTherapyId() {
    return therapyId;
  }

  public void setTherapyId(BigDecimal therapyId) {
    this.therapyId = therapyId;
  }

  public AttachmentMetadata therapyTypeId(BigDecimal therapyTypeId) {
    this.therapyTypeId = therapyTypeId;
    return this;
  }

   /**
   * Ids der Therapieart (Schwerkraft_PE &#x3D; 0, Pumpe_immobil_PE &#x3D; 1, Pumpe_mobil_PE &#x3D; 2, Schwerkraft_EE &#x3D; 3, Pumpe_immobil_EE &#x3D; 4, Pumpe_mobil_EE &#x3D; 5, Bolus &#x3D; 6, Trinknahrung &#x3D; 7, Kolostoma &#x3D; 8, Urostoma &#x3D; 9, Ileostoma &#x3D; 10, Tracheostoma_beatmet &#x3D; 11, Laryngektomie_beatmet &#x3D; 12, Inkontinenz_ableitend &#x3D; 13, Ulcus_cruris &#x3D; 14, Dekubitus &#x3D; 15, Diabetisches_Fußsyndrom &#x3D; 16, Ulzerierte_Tumore &#x3D; 17, Wundfisteln &#x3D; 18, sonstige_chronische_Wunden &#x3D; 19, Diabetes &#x3D; 20, Pflegehilfsmittel &#x3D; 21, Inkontinenz_aufsaugend &#x3D; 22, Compounding &#x3D; 23, Fistel &#x3D; 24, Antibiose &#x3D; 25, Tracheostoma_unbeatmet &#x3D; 26, Laryngektomie_unbeatmet &#x3D; 27, Absaugung_außerhalb_von_TS &#x3D; 28, Beatmung &#x3D; 29, sonstige_Wunden &#x3D; 30, Schmerztherapie &#x3D; 31,  Beatmung_invasiv &#x3D; 32, Beatmung_nicht_invasiv &#x3D; 33, Befeuchtung_aktiv&#x3D; 34, Befeuchtung_passiv &#x3D; 35, Befeuchtung_integriert &#x3D; 36, High_Flow&#x3D; 37, CPAP &#x3D; 38, APAP &#x3D; 39, Bilevel &#x3D; 40, Bilevel_ST &#x3D; 41, Auto_Bilevel &#x3D; 42, CS &#x3D; 43, Hustenhilfen &#x3D; 44, Sekretmobilisation &#x3D; 45, Absaugung_oral &#x3D; 46, Absaugung_subglottisch &#x3D; 47, Monitoring &#x3D; 48, Pulsoximetrie &#x3D; 49, Fingerpulsoximetrie &#x3D; 50, Kapnometer &#x3D; 51, Blutdruckmessgeraet &#x3D; 52, Sauerstoff_mobil &#x3D; 53, Sauerstoff_fluessig &#x3D; 54, Inhalation &#x3D; 55, Medikamentenvernebler &#x3D; 56, Ultraschallvernebler &#x3D; 57, PEP_Systeme &#x3D; 58, IPPB_Inhalation &#x3D; 59,  Atemtherapie &#x3D; 60, Sauerstoff_stationaer &#x3D; 61, Pumpe_mobil_ST &#x3D; 62, Anti_Dekubitussystem &#x3D; 63, Akute_Wunde &#x3D; 64, Transkutane_Harnleiterfistel &#x3D; 65, MehrfachStoma &#x3D; 66, Pouch &#x3D; 67, Stomairrigation &#x3D; 68, PE_Kinder &#x3D; 69, EE_Kinder &#x3D; 70, EE_Technik &#x3D; 71, Wachkoma &#x3D; 72, Inhalation_obere_Atemwege &#x3D; 73, Inhalation_unterer_Atemwege &#x3D; 74, Absaugung_endotracheal &#x3D; 75, ISK_FSK &#x3D; 76, Anale_Irrigation &#x3D; 77, Pessarversorgung &#x3D; 78, Medikamententherapie &#x3D; 79, Immunglobulintherapie &#x3D; 80, Laryngektomie &#x3D; 81, Schmerztherapie_Pumpe_mobil &#x3D; 82, Haemophilie &#x3D; 83, Lungenhochdruck_PAH &#x3D; 84, Movy &#x3D; 85, Hizentra &#x3D; 86,Schwerkraft_RH &#x3D; 87,Pumpe_mobil_RH &#x3D; 88)
   * @return therapyTypeId
  **/
  @Schema(example = "11", description = "Ids der Therapieart (Schwerkraft_PE = 0, Pumpe_immobil_PE = 1, Pumpe_mobil_PE = 2, Schwerkraft_EE = 3, Pumpe_immobil_EE = 4, Pumpe_mobil_EE = 5, Bolus = 6, Trinknahrung = 7, Kolostoma = 8, Urostoma = 9, Ileostoma = 10, Tracheostoma_beatmet = 11, Laryngektomie_beatmet = 12, Inkontinenz_ableitend = 13, Ulcus_cruris = 14, Dekubitus = 15, Diabetisches_Fußsyndrom = 16, Ulzerierte_Tumore = 17, Wundfisteln = 18, sonstige_chronische_Wunden = 19, Diabetes = 20, Pflegehilfsmittel = 21, Inkontinenz_aufsaugend = 22, Compounding = 23, Fistel = 24, Antibiose = 25, Tracheostoma_unbeatmet = 26, Laryngektomie_unbeatmet = 27, Absaugung_außerhalb_von_TS = 28, Beatmung = 29, sonstige_Wunden = 30, Schmerztherapie = 31,  Beatmung_invasiv = 32, Beatmung_nicht_invasiv = 33, Befeuchtung_aktiv= 34, Befeuchtung_passiv = 35, Befeuchtung_integriert = 36, High_Flow= 37, CPAP = 38, APAP = 39, Bilevel = 40, Bilevel_ST = 41, Auto_Bilevel = 42, CS = 43, Hustenhilfen = 44, Sekretmobilisation = 45, Absaugung_oral = 46, Absaugung_subglottisch = 47, Monitoring = 48, Pulsoximetrie = 49, Fingerpulsoximetrie = 50, Kapnometer = 51, Blutdruckmessgeraet = 52, Sauerstoff_mobil = 53, Sauerstoff_fluessig = 54, Inhalation = 55, Medikamentenvernebler = 56, Ultraschallvernebler = 57, PEP_Systeme = 58, IPPB_Inhalation = 59,  Atemtherapie = 60, Sauerstoff_stationaer = 61, Pumpe_mobil_ST = 62, Anti_Dekubitussystem = 63, Akute_Wunde = 64, Transkutane_Harnleiterfistel = 65, MehrfachStoma = 66, Pouch = 67, Stomairrigation = 68, PE_Kinder = 69, EE_Kinder = 70, EE_Technik = 71, Wachkoma = 72, Inhalation_obere_Atemwege = 73, Inhalation_unterer_Atemwege = 74, Absaugung_endotracheal = 75, ISK_FSK = 76, Anale_Irrigation = 77, Pessarversorgung = 78, Medikamententherapie = 79, Immunglobulintherapie = 80, Laryngektomie = 81, Schmerztherapie_Pumpe_mobil = 82, Haemophilie = 83, Lungenhochdruck_PAH = 84, Movy = 85, Hizentra = 86,Schwerkraft_RH = 87,Pumpe_mobil_RH = 88)")
  public BigDecimal getTherapyTypeId() {
    return therapyTypeId;
  }

  public void setTherapyTypeId(BigDecimal therapyTypeId) {
    this.therapyTypeId = therapyTypeId;
  }

  public AttachmentMetadata woundLocation(BigDecimal woundLocation) {
    this.woundLocation = woundLocation;
    return this;
  }

   /**
   * Wundlokalisation nur bei Therapie Wunde (1 &#x3D; rechts kleine Zehe, 2 &#x3D; rechts 4. Zehe, 3 &#x3D; rechts 3. Zehe, 4 &#x3D; rechts 2. Zehe, 5 &#x3D; rechts Großzehe, 6 &#x3D; links kleine Zehe, 7 &#x3D; links 4. Zehe, 8 &#x3D; links 3. Zehe, 9 &#x3D; links 2. Zehe, 10 &#x3D; links Großzehe, 11 &#x3D; rechts unten vorderer Fußballen, 12 &#x3D; rechts unten Fußsohle, 13 &#x3D; rechts unten Ferse, 14 &#x3D; links unten vorderer Fußballen, 15 &#x3D; links unten Fußsohle, 16 &#x3D; links unten Ferse, 17 &#x3D; rechts unten Vorderfuß, 18 &#x3D; rechts unten Fußspann, 19 &#x3D; links unten Vorderfuß, 20 &#x3D; links unten Fußspann, 21 &#x3D; rechts außen Knöchel, 22 &#x3D; rechts außen Knöchel, 23 &#x3D; rechts außen Unterschenkel, 24 &#x3D; rechts außen Unterschenkel, 25 &#x3D; rechts außen Oberschenkel, 26 &#x3D; rechts außen Oberschenkel, 27 &#x3D; rechts Trochanter, 28 &#x3D; links außen Knöchel, 29 &#x3D; links außen Knöchel, 30 &#x3D; links außen Unterschenkel, 31 &#x3D; links außen Unterschenkel, 32 &#x3D; links außen Oberschenkel, 33 &#x3D; links außen Oberschenkel, 34 &#x3D; links Trochanter, 35 &#x3D; rechts Gesäß, 36 &#x3D; links Gesäß, 37 &#x3D; Kreuzbeinregion, 38 &#x3D; Sakralregion, 39 &#x3D; rechts unterer Rücken, 40 &#x3D; links unterer Rücken, 41 &#x3D; Wirbelsäule, 42 &#x3D; rechts Schulterblatt/Schulter, 43 &#x3D; links Schulterblatt/Schulter, 44 &#x3D; rechts außen Oberarm, 45 &#x3D; rechts Ellenbogen, 46 &#x3D; rechts außen Unterarm, 47 &#x3D; rechts Handrücken, 48 &#x3D; links außen Oberarm, 49 &#x3D; links Ellenbogen, 50 &#x3D; links außen Unterarm, 51 &#x3D; links Handrücken, 52 &#x3D; Nacken, 53 &#x3D; hinten Kopf, 54 &#x3D; Genitalien/Leiste, 55 &#x3D; Unterbauch, 56 &#x3D; Oberbauch, 57 &#x3D; rechts Thorax, 58 &#x3D; links Thorax, 59 &#x3D; rechts außen Oberarm, 60 &#x3D; rechts außen Unterarm, 61 &#x3D; rechts Handinnenfläche, 62 &#x3D; links außen Oberarm, 63 &#x3D; links außen Unterarm, 64 &#x3D; links Handinnenfläche, 65 &#x3D; Hals, 66 &#x3D; rechts Ohr, 67 &#x3D; links Ohr, 68 &#x3D; vorne Kopf, 69 &#x3D; innen rechts Knie, 70 &#x3D; Mitte rechts Knie, 71 &#x3D; außen rechts Knie, 72 &#x3D; innen links Knie, 73 &#x3D; Mitte links Knie, 74 &#x3D; außen links Knie, 75 &#x3D; rechts Auge, 76 &#x3D; links Auge, 77 &#x3D; Mund,78 &#x3D; Nase)
   * @return woundLocation
  **/
  @Schema(example = "68", description = "Wundlokalisation nur bei Therapie Wunde (1 = rechts kleine Zehe, 2 = rechts 4. Zehe, 3 = rechts 3. Zehe, 4 = rechts 2. Zehe, 5 = rechts Großzehe, 6 = links kleine Zehe, 7 = links 4. Zehe, 8 = links 3. Zehe, 9 = links 2. Zehe, 10 = links Großzehe, 11 = rechts unten vorderer Fußballen, 12 = rechts unten Fußsohle, 13 = rechts unten Ferse, 14 = links unten vorderer Fußballen, 15 = links unten Fußsohle, 16 = links unten Ferse, 17 = rechts unten Vorderfuß, 18 = rechts unten Fußspann, 19 = links unten Vorderfuß, 20 = links unten Fußspann, 21 = rechts außen Knöchel, 22 = rechts außen Knöchel, 23 = rechts außen Unterschenkel, 24 = rechts außen Unterschenkel, 25 = rechts außen Oberschenkel, 26 = rechts außen Oberschenkel, 27 = rechts Trochanter, 28 = links außen Knöchel, 29 = links außen Knöchel, 30 = links außen Unterschenkel, 31 = links außen Unterschenkel, 32 = links außen Oberschenkel, 33 = links außen Oberschenkel, 34 = links Trochanter, 35 = rechts Gesäß, 36 = links Gesäß, 37 = Kreuzbeinregion, 38 = Sakralregion, 39 = rechts unterer Rücken, 40 = links unterer Rücken, 41 = Wirbelsäule, 42 = rechts Schulterblatt/Schulter, 43 = links Schulterblatt/Schulter, 44 = rechts außen Oberarm, 45 = rechts Ellenbogen, 46 = rechts außen Unterarm, 47 = rechts Handrücken, 48 = links außen Oberarm, 49 = links Ellenbogen, 50 = links außen Unterarm, 51 = links Handrücken, 52 = Nacken, 53 = hinten Kopf, 54 = Genitalien/Leiste, 55 = Unterbauch, 56 = Oberbauch, 57 = rechts Thorax, 58 = links Thorax, 59 = rechts außen Oberarm, 60 = rechts außen Unterarm, 61 = rechts Handinnenfläche, 62 = links außen Oberarm, 63 = links außen Unterarm, 64 = links Handinnenfläche, 65 = Hals, 66 = rechts Ohr, 67 = links Ohr, 68 = vorne Kopf, 69 = innen rechts Knie, 70 = Mitte rechts Knie, 71 = außen rechts Knie, 72 = innen links Knie, 73 = Mitte links Knie, 74 = außen links Knie, 75 = rechts Auge, 76 = links Auge, 77 = Mund,78 = Nase)")
  public BigDecimal getWoundLocation() {
    return woundLocation;
  }

  public void setWoundLocation(BigDecimal woundLocation) {
    this.woundLocation = woundLocation;
  }

  public AttachmentMetadata patientId(String patientId) {
    this.patientId = patientId;
    return this;
  }

   /**
   * Id des Patienten in Alberta
   * @return patientId
  **/
  @Schema(example = "a4adecb6-126a-4fa6-8fac-e80165ac4264", description = "Id des Patienten in Alberta")
  public String getPatientId() {
    return patientId;
  }

  public void setPatientId(String patientId) {
    this.patientId = patientId;
  }

  public AttachmentMetadata createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Id des erstellenden Benutzers (Voraussetzung, Alberta-Id ist bereits durch initialen Abgleich der Benutzer in WaWi vorhanden)
   * @return createdBy
  **/
  @Schema(example = "5a6ca8b6456c14307cb9ae35", description = "Id des erstellenden Benutzers (Voraussetzung, Alberta-Id ist bereits durch initialen Abgleich der Benutzer in WaWi vorhanden)")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public AttachmentMetadata createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Der Zeitstempel des Erstellens
   * @return createdAt
  **/
  @Schema(description = "Der Zeitstempel des Erstellens")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public AttachmentMetadata archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

   /**
   * Kennzeichen, ob Anlage archiviert ist
   * @return archived
  **/
  @Schema(example = "false", description = "Kennzeichen, ob Anlage archiviert ist")
  public Boolean isArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentMetadata attachmentMetadata = (AttachmentMetadata) o;
    return Objects.equals(this.type, attachmentMetadata.type) &&
        Objects.equals(this.therapyId, attachmentMetadata.therapyId) &&
        Objects.equals(this.therapyTypeId, attachmentMetadata.therapyTypeId) &&
        Objects.equals(this.woundLocation, attachmentMetadata.woundLocation) &&
        Objects.equals(this.patientId, attachmentMetadata.patientId) &&
        Objects.equals(this.createdBy, attachmentMetadata.createdBy) &&
        Objects.equals(this.createdAt, attachmentMetadata.createdAt) &&
        Objects.equals(this.archived, attachmentMetadata.archived);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, therapyId, therapyTypeId, woundLocation, patientId, createdBy, createdAt, archived);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentMetadata {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    therapyId: ").append(toIndentedString(therapyId)).append("\n");
    sb.append("    therapyTypeId: ").append(toIndentedString(therapyTypeId)).append("\n");
    sb.append("    woundLocation: ").append(toIndentedString(woundLocation)).append("\n");
    sb.append("    patientId: ").append(toIndentedString(patientId)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
