/*
 * Artikel - Warenwirtschaft (Basis)
 * Synchronisation der Artikel mit Kumavision
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.LocalDate;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
/**
 * InsuranceContract
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-18T14:17:41.660Z[GMT]")
public class InsuranceContract {
  @SerializedName("insuranceContractName")
  private String insuranceContractName = null;

  @SerializedName("salesContracts")
  private List<InsuranceContractSalesContracts> salesContracts = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("therapyId")
  private BigDecimal therapyId = null;

  @SerializedName("therapyTypeIds")
  private List<BigDecimal> therapyTypeIds = null;

  @SerializedName("validFrom")
  private LocalDate validFrom = null;

  @SerializedName("validTo")
  private LocalDate validTo = null;

  @SerializedName("payerIds")
  private List<UUID> payerIds = null;

  @SerializedName("notPayingPayerIds")
  private List<UUID> notPayingPayerIds = null;

  @SerializedName("maximumAmountForProductGroups")
  private List<InsuranceContractMaximumAmountForProductGroups> maximumAmountForProductGroups = null;

  @SerializedName("requiredTemplates")
  private List<InsuranceContractRequiredTemplates> requiredTemplates = null;

  @SerializedName("ageLimit")
  private String ageLimit = null;

  @SerializedName("periodOnPrescriptionNecessary")
  private Boolean periodOnPrescriptionNecessary = null;

  @SerializedName("approvalObligation")
  private Boolean approvalObligation = null;

  @SerializedName("flatChargeTextAllowed")
  private Boolean flatChargeTextAllowed = null;

  @SerializedName("costEstimateRequired")
  private Boolean costEstimateRequired = null;

  @SerializedName("pricingModelType")
  private BigDecimal pricingModelType = null;

  @SerializedName("pricingBasis")
  private String pricingBasis = null;

  @SerializedName("billingType")
  private BigDecimal billingType = null;

  @SerializedName("isSelfPayer")
  private Boolean isSelfPayer = null;

  @SerializedName("visitInterval")
  private InsuranceContractVisitInterval visitInterval = null;

  @SerializedName("maxPermanentPrescriptionPeriod")
  private InsuranceContractMaxPermanentPrescriptionPeriod maxPermanentPrescriptionPeriod = null;

  public InsuranceContract insuranceContractName(String insuranceContractName) {
    this.insuranceContractName = insuranceContractName;
    return this;
  }

   /**
   * Vertragsnummer der Krankenkasse
   * @return insuranceContractName
  **/
  @Schema(example = "34251532", description = "Vertragsnummer der Krankenkasse")
  public String getInsuranceContractName() {
    return insuranceContractName;
  }

  public void setInsuranceContractName(String insuranceContractName) {
    this.insuranceContractName = insuranceContractName;
  }

  public InsuranceContract salesContracts(List<InsuranceContractSalesContracts> salesContracts) {
    this.salesContracts = salesContracts;
    return this;
  }

  public InsuranceContract addSalesContractsItem(InsuranceContractSalesContracts salesContractsItem) {
    if (this.salesContracts == null) {
      this.salesContracts = new ArrayList<InsuranceContractSalesContracts>();
    }
    this.salesContracts.add(salesContractsItem);
    return this;
  }

   /**
   * Get salesContracts
   * @return salesContracts
  **/
  @Schema(description = "")
  public List<InsuranceContractSalesContracts> getSalesContracts() {
    return salesContracts;
  }

  public void setSalesContracts(List<InsuranceContractSalesContracts> salesContracts) {
    this.salesContracts = salesContracts;
  }

  public InsuranceContract name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Sprechender Name des Vertrags
   * @return name
  **/
  @Schema(example = "AOK Bayern Tracheo unbeatmet", required = true, description = "Sprechender Name des Vertrags")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InsuranceContract description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Beschreibung des Vertrags
   * @return description
  **/
  @Schema(example = "weitere Beschreibung zum Vertrag", description = "Beschreibung des Vertrags")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InsuranceContract therapyId(BigDecimal therapyId) {
    this.therapyId = therapyId;
    return this;
  }

   /**
   * Therapie, für die der Vertrag gilt (0&#x3D; Unbekannt, 1 &#x3D; Parenterale Ernährung, 2 &#x3D; Enterale Ernährung, 3 &#x3D; Stoma, 4 &#x3D; Tracheostoma, 5 &#x3D; Inkontinenz ableitend, 6 &#x3D; Wundversorgung, 7 &#x3D; IV-Therapien, 8 &#x3D; Beatmung, 9 &#x3D; Sonstiges, 10 &#x3D; OSA, 11 &#x3D; Hustenhilfen, 12 &#x3D; Absaugung, 13 &#x3D; Patientenüberwachung, 14 &#x3D; Sauerstoff, 15 &#x3D; Inhalations- und Atemtherapie, 16 &#x3D; Lagerungshilfsmittel, 17 &#x3D; Schmerztherapie, 18 &#x3D; Immuntherapie, 19 &#x3D; Rehydration, Befeuchtung &#x3D; 20, High-Flow &#x3D; 21, Atemtherapie &#x3D; 22, Monitoring &#x3D; 23, Diagnostik &#x3D; 24, Zahnschiene &#x3D; 25, Sitzschalenbau &#x3D; 26, Orthopaedietechnik &#x3D; 27, Reha Hilfsmittel &#x3D; 28, Elektrostimulation &#x3D; 29, Diabetes &#x3D; 30, Applikationshilfen IV PE EE &#x3D; 31, Messgeraete fuer Koerperszustaende/-funktionen &#x3D; 32, PCA Schmerztherapie &#x3D; 33, Arzneimittelgabe &#x3D; 34)
   * @return therapyId
  **/
  @Schema(example = "3", description = "Therapie, für die der Vertrag gilt (0= Unbekannt, 1 = Parenterale Ernährung, 2 = Enterale Ernährung, 3 = Stoma, 4 = Tracheostoma, 5 = Inkontinenz ableitend, 6 = Wundversorgung, 7 = IV-Therapien, 8 = Beatmung, 9 = Sonstiges, 10 = OSA, 11 = Hustenhilfen, 12 = Absaugung, 13 = Patientenüberwachung, 14 = Sauerstoff, 15 = Inhalations- und Atemtherapie, 16 = Lagerungshilfsmittel, 17 = Schmerztherapie, 18 = Immuntherapie, 19 = Rehydration, Befeuchtung = 20, High-Flow = 21, Atemtherapie = 22, Monitoring = 23, Diagnostik = 24, Zahnschiene = 25, Sitzschalenbau = 26, Orthopaedietechnik = 27, Reha Hilfsmittel = 28, Elektrostimulation = 29, Diabetes = 30, Applikationshilfen IV PE EE = 31, Messgeraete fuer Koerperszustaende/-funktionen = 32, PCA Schmerztherapie = 33, Arzneimittelgabe = 34)")
  public BigDecimal getTherapyId() {
    return therapyId;
  }

  public void setTherapyId(BigDecimal therapyId) {
    this.therapyId = therapyId;
  }

  public InsuranceContract therapyTypeIds(List<BigDecimal> therapyTypeIds) {
    this.therapyTypeIds = therapyTypeIds;
    return this;
  }

  public InsuranceContract addTherapyTypeIdsItem(BigDecimal therapyTypeIdsItem) {
    if (this.therapyTypeIds == null) {
      this.therapyTypeIds = new ArrayList<BigDecimal>();
    }
    this.therapyTypeIds.add(therapyTypeIdsItem);
    return this;
  }

   /**
   * Get therapyTypeIds
   * @return therapyTypeIds
  **/
  @Schema(description = "")
  public List<BigDecimal> getTherapyTypeIds() {
    return therapyTypeIds;
  }

  public void setTherapyTypeIds(List<BigDecimal> therapyTypeIds) {
    this.therapyTypeIds = therapyTypeIds;
  }

  public InsuranceContract validFrom(LocalDate validFrom) {
    this.validFrom = validFrom;
    return this;
  }

   /**
   * Vertrag gültig ab
   * @return validFrom
  **/
  @Schema(example = "Mon Mar 02 00:00:00 GMT 2020", description = "Vertrag gültig ab")
  public LocalDate getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(LocalDate validFrom) {
    this.validFrom = validFrom;
  }

  public InsuranceContract validTo(LocalDate validTo) {
    this.validTo = validTo;
    return this;
  }

   /**
   * Vertrag gültig bis
   * @return validTo
  **/
  @Schema(example = "Thu Dec 31 00:00:00 GMT 2099", description = "Vertrag gültig bis")
  public LocalDate getValidTo() {
    return validTo;
  }

  public void setValidTo(LocalDate validTo) {
    this.validTo = validTo;
  }

  public InsuranceContract payerIds(List<UUID> payerIds) {
    this.payerIds = payerIds;
    return this;
  }

  public InsuranceContract addPayerIdsItem(UUID payerIdsItem) {
    if (this.payerIds == null) {
      this.payerIds = new ArrayList<UUID>();
    }
    this.payerIds.add(payerIdsItem);
    return this;
  }

   /**
   * Alberta-Ids aller Krankenkassen, für die der Vertrag gilt
   * @return payerIds
  **/
  @Schema(example = "[b354b882-e140-4932-b508-0ba4b25d369b, 38f3a04a-35a7-4231-bf66-caceff0e6278]", description = "Alberta-Ids aller Krankenkassen, für die der Vertrag gilt")
  public List<UUID> getPayerIds() {
    return payerIds;
  }

  public void setPayerIds(List<UUID> payerIds) {
    this.payerIds = payerIds;
  }

  public InsuranceContract notPayingPayerIds(List<UUID> notPayingPayerIds) {
    this.notPayingPayerIds = notPayingPayerIds;
    return this;
  }

  public InsuranceContract addNotPayingPayerIdsItem(UUID notPayingPayerIdsItem) {
    if (this.notPayingPayerIds == null) {
      this.notPayingPayerIds = new ArrayList<UUID>();
    }
    this.notPayingPayerIds.add(notPayingPayerIdsItem);
    return this;
  }

   /**
   * Nur bei Selbstzahlerverträgen! Alberta-Ids aller Krankenkassen, für die der Vertrag NICHT gilt, also selbst gezahlt werden muss
   * @return notPayingPayerIds
  **/
  @Schema(example = "[b354b882-e140-4932-b508-0ba4b25d369b, 38f3a04a-35a7-4231-bf66-caceff0e6278]", description = "Nur bei Selbstzahlerverträgen! Alberta-Ids aller Krankenkassen, für die der Vertrag NICHT gilt, also selbst gezahlt werden muss")
  public List<UUID> getNotPayingPayerIds() {
    return notPayingPayerIds;
  }

  public void setNotPayingPayerIds(List<UUID> notPayingPayerIds) {
    this.notPayingPayerIds = notPayingPayerIds;
  }

  public InsuranceContract maximumAmountForProductGroups(List<InsuranceContractMaximumAmountForProductGroups> maximumAmountForProductGroups) {
    this.maximumAmountForProductGroups = maximumAmountForProductGroups;
    return this;
  }

  public InsuranceContract addMaximumAmountForProductGroupsItem(InsuranceContractMaximumAmountForProductGroups maximumAmountForProductGroupsItem) {
    if (this.maximumAmountForProductGroups == null) {
      this.maximumAmountForProductGroups = new ArrayList<InsuranceContractMaximumAmountForProductGroups>();
    }
    this.maximumAmountForProductGroups.add(maximumAmountForProductGroupsItem);
    return this;
  }

   /**
   * Get maximumAmountForProductGroups
   * @return maximumAmountForProductGroups
  **/
  @Schema(description = "")
  public List<InsuranceContractMaximumAmountForProductGroups> getMaximumAmountForProductGroups() {
    return maximumAmountForProductGroups;
  }

  public void setMaximumAmountForProductGroups(List<InsuranceContractMaximumAmountForProductGroups> maximumAmountForProductGroups) {
    this.maximumAmountForProductGroups = maximumAmountForProductGroups;
  }

  public InsuranceContract requiredTemplates(List<InsuranceContractRequiredTemplates> requiredTemplates) {
    this.requiredTemplates = requiredTemplates;
    return this;
  }

  public InsuranceContract addRequiredTemplatesItem(InsuranceContractRequiredTemplates requiredTemplatesItem) {
    if (this.requiredTemplates == null) {
      this.requiredTemplates = new ArrayList<InsuranceContractRequiredTemplates>();
    }
    this.requiredTemplates.add(requiredTemplatesItem);
    return this;
  }

   /**
   * Auflistung aller Dokumentenvorlagen in Alberta, die lt. Vertrag ausgefüllt werden müssen
   * @return requiredTemplates
  **/
  @Schema(description = "Auflistung aller Dokumentenvorlagen in Alberta, die lt. Vertrag ausgefüllt werden müssen")
  public List<InsuranceContractRequiredTemplates> getRequiredTemplates() {
    return requiredTemplates;
  }

  public void setRequiredTemplates(List<InsuranceContractRequiredTemplates> requiredTemplates) {
    this.requiredTemplates = requiredTemplates;
  }

  public InsuranceContract ageLimit(String ageLimit) {
    this.ageLimit = ageLimit;
    return this;
  }

   /**
   * Altersbeschränkung für Personen, für die der Vertrag gilt
   * @return ageLimit
  **/
  @Schema(example = "65", description = "Altersbeschränkung für Personen, für die der Vertrag gilt")
  public String getAgeLimit() {
    return ageLimit;
  }

  public void setAgeLimit(String ageLimit) {
    this.ageLimit = ageLimit;
  }

  public InsuranceContract periodOnPrescriptionNecessary(Boolean periodOnPrescriptionNecessary) {
    this.periodOnPrescriptionNecessary = periodOnPrescriptionNecessary;
    return this;
  }

   /**
   * Zeitraum auf VO erforderlich
   * @return periodOnPrescriptionNecessary
  **/
  @Schema(example = "true", description = "Zeitraum auf VO erforderlich")
  public Boolean isPeriodOnPrescriptionNecessary() {
    return periodOnPrescriptionNecessary;
  }

  public void setPeriodOnPrescriptionNecessary(Boolean periodOnPrescriptionNecessary) {
    this.periodOnPrescriptionNecessary = periodOnPrescriptionNecessary;
  }

  public InsuranceContract approvalObligation(Boolean approvalObligation) {
    this.approvalObligation = approvalObligation;
    return this;
  }

   /**
   * Genehmigungspflicht
   * @return approvalObligation
  **/
  @Schema(example = "false", description = "Genehmigungspflicht")
  public Boolean isApprovalObligation() {
    return approvalObligation;
  }

  public void setApprovalObligation(Boolean approvalObligation) {
    this.approvalObligation = approvalObligation;
  }

  public InsuranceContract flatChargeTextAllowed(Boolean flatChargeTextAllowed) {
    this.flatChargeTextAllowed = flatChargeTextAllowed;
    return this;
  }

   /**
   * Rezeptanforderung Pauschalentext erlaubt
   * @return flatChargeTextAllowed
  **/
  @Schema(example = "false", description = "Rezeptanforderung Pauschalentext erlaubt")
  public Boolean isFlatChargeTextAllowed() {
    return flatChargeTextAllowed;
  }

  public void setFlatChargeTextAllowed(Boolean flatChargeTextAllowed) {
    this.flatChargeTextAllowed = flatChargeTextAllowed;
  }

  public InsuranceContract costEstimateRequired(Boolean costEstimateRequired) {
    this.costEstimateRequired = costEstimateRequired;
    return this;
  }

   /**
   * Kostenvoranschlag nötig
   * @return costEstimateRequired
  **/
  @Schema(example = "true", description = "Kostenvoranschlag nötig")
  public Boolean isCostEstimateRequired() {
    return costEstimateRequired;
  }

  public void setCostEstimateRequired(Boolean costEstimateRequired) {
    this.costEstimateRequired = costEstimateRequired;
  }

  public InsuranceContract pricingModelType(BigDecimal pricingModelType) {
    this.pricingModelType = pricingModelType;
    return this;
  }

   /**
   * Art des Preismodells für die Abrechnung - (0 &#x3D; Unbekannt, 1 &#x3D; Pauschale, 2 &#x3D; Aufschlag, 3 &#x3D; Abschlag, 4 &#x3D; Festbetrag)
   * @return pricingModelType
  **/
  @Schema(example = "3", description = "Art des Preismodells für die Abrechnung - (0 = Unbekannt, 1 = Pauschale, 2 = Aufschlag, 3 = Abschlag, 4 = Festbetrag)")
  public BigDecimal getPricingModelType() {
    return pricingModelType;
  }

  public void setPricingModelType(BigDecimal pricingModelType) {
    this.pricingModelType = pricingModelType;
  }

  public InsuranceContract pricingBasis(String pricingBasis) {
    this.pricingBasis = pricingBasis;
    return this;
  }

   /**
   * Wenn Preismodell Aufschlag oder Abschlag, dann hier der Bezugspreis für Auf-/Abschlag (mögliche Werte \&quot;AEP\&quot; oder \&quot;Festbetrag\&quot;)
   * @return pricingBasis
  **/
  @Schema(example = "AEP", description = "Wenn Preismodell Aufschlag oder Abschlag, dann hier der Bezugspreis für Auf-/Abschlag (mögliche Werte \"AEP\" oder \"Festbetrag\")")
  public String getPricingBasis() {
    return pricingBasis;
  }

  public void setPricingBasis(String pricingBasis) {
    this.pricingBasis = pricingBasis;
  }

  public InsuranceContract billingType(BigDecimal billingType) {
    this.billingType = billingType;
    return this;
  }

   /**
   * Abrechungsart nach § - mögliche Werte 300 und 302
   * @return billingType
  **/
  @Schema(example = "300", description = "Abrechungsart nach § - mögliche Werte 300 und 302")
  public BigDecimal getBillingType() {
    return billingType;
  }

  public void setBillingType(BigDecimal billingType) {
    this.billingType = billingType;
  }

  public InsuranceContract isSelfPayer(Boolean isSelfPayer) {
    this.isSelfPayer = isSelfPayer;
    return this;
  }

   /**
   * Selbstzahlervertrag Ja/Nein
   * @return isSelfPayer
  **/
  @Schema(example = "true", description = "Selbstzahlervertrag Ja/Nein")
  public Boolean isIsSelfPayer() {
    return isSelfPayer;
  }

  public void setIsSelfPayer(Boolean isSelfPayer) {
    this.isSelfPayer = isSelfPayer;
  }

  public InsuranceContract visitInterval(InsuranceContractVisitInterval visitInterval) {
    this.visitInterval = visitInterval;
    return this;
  }

   /**
   * Get visitInterval
   * @return visitInterval
  **/
  @Schema(description = "")
  public InsuranceContractVisitInterval getVisitInterval() {
    return visitInterval;
  }

  public void setVisitInterval(InsuranceContractVisitInterval visitInterval) {
    this.visitInterval = visitInterval;
  }

  public InsuranceContract maxPermanentPrescriptionPeriod(InsuranceContractMaxPermanentPrescriptionPeriod maxPermanentPrescriptionPeriod) {
    this.maxPermanentPrescriptionPeriod = maxPermanentPrescriptionPeriod;
    return this;
  }

   /**
   * Get maxPermanentPrescriptionPeriod
   * @return maxPermanentPrescriptionPeriod
  **/
  @Schema(description = "")
  public InsuranceContractMaxPermanentPrescriptionPeriod getMaxPermanentPrescriptionPeriod() {
    return maxPermanentPrescriptionPeriod;
  }

  public void setMaxPermanentPrescriptionPeriod(InsuranceContractMaxPermanentPrescriptionPeriod maxPermanentPrescriptionPeriod) {
    this.maxPermanentPrescriptionPeriod = maxPermanentPrescriptionPeriod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsuranceContract insuranceContract = (InsuranceContract) o;
    return Objects.equals(this.insuranceContractName, insuranceContract.insuranceContractName) &&
        Objects.equals(this.salesContracts, insuranceContract.salesContracts) &&
        Objects.equals(this.name, insuranceContract.name) &&
        Objects.equals(this.description, insuranceContract.description) &&
        Objects.equals(this.therapyId, insuranceContract.therapyId) &&
        Objects.equals(this.therapyTypeIds, insuranceContract.therapyTypeIds) &&
        Objects.equals(this.validFrom, insuranceContract.validFrom) &&
        Objects.equals(this.validTo, insuranceContract.validTo) &&
        Objects.equals(this.payerIds, insuranceContract.payerIds) &&
        Objects.equals(this.notPayingPayerIds, insuranceContract.notPayingPayerIds) &&
        Objects.equals(this.maximumAmountForProductGroups, insuranceContract.maximumAmountForProductGroups) &&
        Objects.equals(this.requiredTemplates, insuranceContract.requiredTemplates) &&
        Objects.equals(this.ageLimit, insuranceContract.ageLimit) &&
        Objects.equals(this.periodOnPrescriptionNecessary, insuranceContract.periodOnPrescriptionNecessary) &&
        Objects.equals(this.approvalObligation, insuranceContract.approvalObligation) &&
        Objects.equals(this.flatChargeTextAllowed, insuranceContract.flatChargeTextAllowed) &&
        Objects.equals(this.costEstimateRequired, insuranceContract.costEstimateRequired) &&
        Objects.equals(this.pricingModelType, insuranceContract.pricingModelType) &&
        Objects.equals(this.pricingBasis, insuranceContract.pricingBasis) &&
        Objects.equals(this.billingType, insuranceContract.billingType) &&
        Objects.equals(this.isSelfPayer, insuranceContract.isSelfPayer) &&
        Objects.equals(this.visitInterval, insuranceContract.visitInterval) &&
        Objects.equals(this.maxPermanentPrescriptionPeriod, insuranceContract.maxPermanentPrescriptionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insuranceContractName, salesContracts, name, description, therapyId, therapyTypeIds, validFrom, validTo, payerIds, notPayingPayerIds, maximumAmountForProductGroups, requiredTemplates, ageLimit, periodOnPrescriptionNecessary, approvalObligation, flatChargeTextAllowed, costEstimateRequired, pricingModelType, pricingBasis, billingType, isSelfPayer, visitInterval, maxPermanentPrescriptionPeriod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsuranceContract {\n");
    
    sb.append("    insuranceContractName: ").append(toIndentedString(insuranceContractName)).append("\n");
    sb.append("    salesContracts: ").append(toIndentedString(salesContracts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    therapyId: ").append(toIndentedString(therapyId)).append("\n");
    sb.append("    therapyTypeIds: ").append(toIndentedString(therapyTypeIds)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    payerIds: ").append(toIndentedString(payerIds)).append("\n");
    sb.append("    notPayingPayerIds: ").append(toIndentedString(notPayingPayerIds)).append("\n");
    sb.append("    maximumAmountForProductGroups: ").append(toIndentedString(maximumAmountForProductGroups)).append("\n");
    sb.append("    requiredTemplates: ").append(toIndentedString(requiredTemplates)).append("\n");
    sb.append("    ageLimit: ").append(toIndentedString(ageLimit)).append("\n");
    sb.append("    periodOnPrescriptionNecessary: ").append(toIndentedString(periodOnPrescriptionNecessary)).append("\n");
    sb.append("    approvalObligation: ").append(toIndentedString(approvalObligation)).append("\n");
    sb.append("    flatChargeTextAllowed: ").append(toIndentedString(flatChargeTextAllowed)).append("\n");
    sb.append("    costEstimateRequired: ").append(toIndentedString(costEstimateRequired)).append("\n");
    sb.append("    pricingModelType: ").append(toIndentedString(pricingModelType)).append("\n");
    sb.append("    pricingBasis: ").append(toIndentedString(pricingBasis)).append("\n");
    sb.append("    billingType: ").append(toIndentedString(billingType)).append("\n");
    sb.append("    isSelfPayer: ").append(toIndentedString(isSelfPayer)).append("\n");
    sb.append("    visitInterval: ").append(toIndentedString(visitInterval)).append("\n");
    sb.append("    maxPermanentPrescriptionPeriod: ").append(toIndentedString(maxPermanentPrescriptionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
