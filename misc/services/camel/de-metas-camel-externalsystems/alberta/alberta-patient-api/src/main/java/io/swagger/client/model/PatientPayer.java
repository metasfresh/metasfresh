/*
 * Patient - Warenwirtschaft (Basis)
 * Synchronisation der Patienten mit der Warenwirtschaft
 *
 * OpenAPI spec version: 1.0.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.LocalDate;

import java.util.Objects;
/**
 * PatientPayer
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-24T08:15:46.695Z[GMT]")
public class PatientPayer {
  @SerializedName("payerId")
  private String payerId = null;

  @SerializedName("payerType")
  private String payerType = null;

  @SerializedName("numberOfInsured")
  private String numberOfInsured = null;

  @SerializedName("copaymentFromDate")
  private LocalDate copaymentFromDate = null;

  @SerializedName("copaymentToDate")
  private LocalDate copaymentToDate = null;

  public PatientPayer payerId(String payerId) {
    this.payerId = payerId;
    return this;
  }

   /**
   * Id des Kostentr채gers (Voraussetzung, Alberta-Id ist bereits durch initialen Abgleich in WaWi vorhanden)
   * @return payerId
  **/
  @Schema(example = "4cb88b2e-0051-40e1-a1c9-d711d3249859", description = "Id des Kostentr채gers (Voraussetzung, Alberta-Id ist bereits durch initialen Abgleich in WaWi vorhanden)")
  public String getPayerId() {
    return payerId;
  }

  public void setPayerId(String payerId) {
    this.payerId = payerId;
  }

  public PatientPayer payerType(String payerType) {
    this.payerType = payerType;
    return this;
  }

   /**
   * Typ des Kostentr채gers (0 &#x3D; Unbekannt, 1 &#x3D; gesetzlich, 2 &#x3D; privat, 3 &#x3D; Berufsgenossenschaft, 4 &#x3D; Selbstzahler, 5 &#x3D; Andere)
   * @return payerType
  **/
  @Schema(example = "2", description = "Typ des Kostentr채gers (0 = Unbekannt, 1 = gesetzlich, 2 = privat, 3 = Berufsgenossenschaft, 4 = Selbstzahler, 5 = Andere)")
  public String getPayerType() {
    return payerType;
  }

  public void setPayerType(String payerType) {
    this.payerType = payerType;
  }

  public PatientPayer numberOfInsured(String numberOfInsured) {
    this.numberOfInsured = numberOfInsured;
    return this;
  }

   /**
   * Versichertennummer des Patienten (Krankenkasse)
   * @return numberOfInsured
  **/
  @Schema(example = "A123456789", description = "Versichertennummer des Patienten (Krankenkasse)")
  public String getNumberOfInsured() {
    return numberOfInsured;
  }

  public void setNumberOfInsured(String numberOfInsured) {
    this.numberOfInsured = numberOfInsured;
  }

  public PatientPayer copaymentFromDate(LocalDate copaymentFromDate) {
    this.copaymentFromDate = copaymentFromDate;
    return this;
  }

   /**
   * Zuzahlungsbefreit ab Datum - Feld bleibt leer, wenn keine Zuzahlungsbefreiung
   * @return copaymentFromDate
  **/
  @Schema(example = "Mon Jan 01 00:00:00 GMT 2018", description = "Zuzahlungsbefreit ab Datum - Feld bleibt leer, wenn keine Zuzahlungsbefreiung")
  public LocalDate getCopaymentFromDate() {
    return copaymentFromDate;
  }

  public void setCopaymentFromDate(LocalDate copaymentFromDate) {
    this.copaymentFromDate = copaymentFromDate;
  }

  public PatientPayer copaymentToDate(LocalDate copaymentToDate) {
    this.copaymentToDate = copaymentToDate;
    return this;
  }

   /**
   * Zuzahlungsbefreit bis Datum - Feld bleibt leer, wenn keine Zuzahlungsbefreiung
   * @return copaymentToDate
  **/
  @Schema(example = "Wed Jan 31 00:00:00 GMT 2018", description = "Zuzahlungsbefreit bis Datum - Feld bleibt leer, wenn keine Zuzahlungsbefreiung")
  public LocalDate getCopaymentToDate() {
    return copaymentToDate;
  }

  public void setCopaymentToDate(LocalDate copaymentToDate) {
    this.copaymentToDate = copaymentToDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientPayer patientPayer = (PatientPayer) o;
    return Objects.equals(this.payerId, patientPayer.payerId) &&
        Objects.equals(this.payerType, patientPayer.payerType) &&
        Objects.equals(this.numberOfInsured, patientPayer.numberOfInsured) &&
        Objects.equals(this.copaymentFromDate, patientPayer.copaymentFromDate) &&
        Objects.equals(this.copaymentToDate, patientPayer.copaymentToDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payerId, payerType, numberOfInsured, copaymentFromDate, copaymentToDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientPayer {\n");
    
    sb.append("    payerId: ").append(toIndentedString(payerId)).append("\n");
    sb.append("    payerType: ").append(toIndentedString(payerType)).append("\n");
    sb.append("    numberOfInsured: ").append(toIndentedString(numberOfInsured)).append("\n");
    sb.append("    copaymentFromDate: ").append(toIndentedString(copaymentFromDate)).append("\n");
    sb.append("    copaymentToDate: ").append(toIndentedString(copaymentToDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
