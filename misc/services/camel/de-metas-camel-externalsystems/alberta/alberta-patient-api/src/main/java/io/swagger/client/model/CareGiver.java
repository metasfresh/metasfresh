/*
 * Patient - Warenwirtschaft (Basis)
 * Synchronisation der Patienten mit der Warenwirtschaft
 *
 * OpenAPI spec version: 1.0.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.math.BigDecimal;
import java.util.Objects;
import java.util.UUID;
/**
 * CareGiver
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-24T08:15:46.695Z[GMT]")
public class CareGiver {
  @SerializedName("_id")
  private UUID _id = null;

  @SerializedName("customerId")
  private String customerId = null;

  @SerializedName("type")
  private BigDecimal type = null;

  @SerializedName("isLegalCarer")
  private Boolean isLegalCarer = null;

  @SerializedName("gender")
  private String gender = null;

  @SerializedName("title")
  private BigDecimal title = null;

  @SerializedName("firstName")
  private String firstName = null;

  @SerializedName("lastName")
  private String lastName = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("postalCode")
  private String postalCode = null;

  @SerializedName("city")
  private String city = null;

  @SerializedName("phone")
  private String phone = null;

  @SerializedName("mobilePhone")
  private String mobilePhone = null;

  @SerializedName("fax")
  private String fax = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("archived")
  private Boolean archived = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  public CareGiver _id(UUID _id) {
    this._id = _id;
    return this;
  }

   /**
   * Get _id
   * @return _id
  **/
  @Schema(description = "")
  public UUID getId() {
    return _id;
  }

  public void setId(UUID _id) {
    this._id = _id;
  }

  public CareGiver customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @Schema(example = "D545452", description = "")
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }

  public CareGiver type(BigDecimal type) {
    this.type = type;
    return this;
  }

   /**
   * gibt des Art des Patientenkontaktes an - Unknown &#x3D; 0, Ehemann &#x3D; 1, Ehefrau &#x3D; 2, Lebensgefährte/in &#x3D; 3, Sohn &#x3D; 4, Tochter &#x3D; 5, Enkel &#x3D; 6, Enkelin &#x3D; 7, Urenkel &#x3D; 8, Urenkelin &#x3D; 9, Mutter &#x3D; 10, Vater &#x3D; 11, Onkel &#x3D; 12, Tante &#x3D; 13, Nichte &#x3D; 14, Neffe &#x3D; 15, Großonkel &#x3D; 16, Großtante &#x3D; 17, Großnichte &#x3D; 18, Großneffe &#x3D; 19, Schwester &#x3D; 20, Bruder &#x3D; 21, Cousin &#x3D; 22, Cousine &#x3D; 23, Schwager &#x3D; 24, Schwägerin &#x3D; 25, Schwagersbruder &#x3D; 26, Schwagersschwester &#x3D; 27, Schwiegermutter &#x3D; 28, Schwiegervater &#x3D; 29, Schwiegeronkel &#x3D; 30, Schwiegertante &#x3D; 31, Schwiegerkind &#x3D; 32, Schwiegersohn &#x3D; 33, Schwiegertochter &#x3D; 34, Schwiegerenkel &#x3D; 35, Schwiegerenkelin &#x3D; 36, Stiefmutter &#x3D; 37, Stiefvater &#x3D; 38, Stiefschwester &#x3D; 39, Stiefbruder &#x3D; 40, Stieftochter &#x3D; 41, Stiefsohn &#x3D; 42, Stiefenkel &#x3D; 43, Stiefurenkel &#x3D; 44, Pflegesohn &#x3D; 45, Pflegetochter &#x3D; 46, Pflegemutter &#x3D; 47, Pflegevater &#x3D; 48, Halbschwester &#x3D; 49, Halbbruder &#x3D; 50, Halbonkel &#x3D; 51, Halbtante &#x3D; 52, Halbcousin &#x3D; 53, Halbcousine &#x3D; 54, Nachbarin &#x3D; 55, Nachbar &#x3D; 56, Betreuungsbüro &#x3D; 57, Freund(in) &#x3D; 58
   * minimum: 0
   * maximum: 58
   * @return type
  **/
  @Schema(example = "2", description = "gibt des Art des Patientenkontaktes an - Unknown = 0, Ehemann = 1, Ehefrau = 2, Lebensgefährte/in = 3, Sohn = 4, Tochter = 5, Enkel = 6, Enkelin = 7, Urenkel = 8, Urenkelin = 9, Mutter = 10, Vater = 11, Onkel = 12, Tante = 13, Nichte = 14, Neffe = 15, Großonkel = 16, Großtante = 17, Großnichte = 18, Großneffe = 19, Schwester = 20, Bruder = 21, Cousin = 22, Cousine = 23, Schwager = 24, Schwägerin = 25, Schwagersbruder = 26, Schwagersschwester = 27, Schwiegermutter = 28, Schwiegervater = 29, Schwiegeronkel = 30, Schwiegertante = 31, Schwiegerkind = 32, Schwiegersohn = 33, Schwiegertochter = 34, Schwiegerenkel = 35, Schwiegerenkelin = 36, Stiefmutter = 37, Stiefvater = 38, Stiefschwester = 39, Stiefbruder = 40, Stieftochter = 41, Stiefsohn = 42, Stiefenkel = 43, Stiefurenkel = 44, Pflegesohn = 45, Pflegetochter = 46, Pflegemutter = 47, Pflegevater = 48, Halbschwester = 49, Halbbruder = 50, Halbonkel = 51, Halbtante = 52, Halbcousin = 53, Halbcousine = 54, Nachbarin = 55, Nachbar = 56, Betreuungsbüro = 57, Freund(in) = 58")
  public BigDecimal getType() {
    return type;
  }

  public void setType(BigDecimal type) {
    this.type = type;
  }

  public CareGiver isLegalCarer(Boolean isLegalCarer) {
    this.isLegalCarer = isLegalCarer;
    return this;
  }

   /**
   * Kennzeichen, ob es sich beim Kontakt um einen gesetzlichen Betreuer handelt
   * @return isLegalCarer
  **/
  @Schema(example = "true", description = "Kennzeichen, ob es sich beim Kontakt um einen gesetzlichen Betreuer handelt")
  public Boolean isIsLegalCarer() {
    return isLegalCarer;
  }

  public void setIsLegalCarer(Boolean isLegalCarer) {
    this.isLegalCarer = isLegalCarer;
  }

  public CareGiver gender(String gender) {
    this.gender = gender;
    return this;
  }

   /**
   * 0 &#x3D; Unbekannt, 1 &#x3D; Weiblich, 2 &#x3D; Männlich, 3 &#x3D; Divers
   * @return gender
  **/
  @Schema(example = "2", description = "0 = Unbekannt, 1 = Weiblich, 2 = Männlich, 3 = Divers")
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }

  public CareGiver title(BigDecimal title) {
    this.title = title;
    return this;
  }

   /**
   * 0 &#x3D; Unbekannt, 1 &#x3D; Dr., 2 &#x3D; Prof. Dr., 3 &#x3D; Dipl. Ing., 4 &#x3D; Dipl. Med., 5 &#x3D; Dipl. Psych., 6 &#x3D; Dr. Dr., 7 &#x3D; Dr. med., 8 &#x3D; Prof. Dr. Dr., 9 &#x3D; Prof., 10 &#x3D; Prof. Dr. med., 11 &#x3D; Rechtsanwalt, 12 &#x3D; Rechtsanwältin, 13 &#x3D; Schwester (Orden)
   * minimum: 0
   * maximum: 13
   * @return title
  **/
  @Schema(example = "1", description = "0 = Unbekannt, 1 = Dr., 2 = Prof. Dr., 3 = Dipl. Ing., 4 = Dipl. Med., 5 = Dipl. Psych., 6 = Dr. Dr., 7 = Dr. med., 8 = Prof. Dr. Dr., 9 = Prof., 10 = Prof. Dr. med., 11 = Rechtsanwalt, 12 = Rechtsanwältin, 13 = Schwester (Orden)")
  public BigDecimal getTitle() {
    return title;
  }

  public void setTitle(BigDecimal title) {
    this.title = title;
  }

  public CareGiver firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @Schema(example = "Anna", required = true, description = "")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public CareGiver lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @Schema(example = "Mustermann", required = true, description = "")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public CareGiver address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(example = "Martin-Richter-Str. 22", description = "")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public CareGiver postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Get postalCode
   * @return postalCode
  **/
  @Schema(example = "90489", description = "")
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public CareGiver city(String city) {
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @Schema(example = "Nürnberg", description = "")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public CareGiver phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * Ohne Ländervorwahl
   * @return phone
  **/
  @Schema(example = "0911 3324 323", description = "Ohne Ländervorwahl")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public CareGiver mobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * Ohne Ländervorwahl
   * @return mobilePhone
  **/
  @Schema(example = "0178 3524 323", description = "Ohne Ländervorwahl")
  public String getMobilePhone() {
    return mobilePhone;
  }

  public void setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
  }

  public CareGiver fax(String fax) {
    this.fax = fax;
    return this;
  }

   /**
   * Ohne Ländervorwahl
   * @return fax
  **/
  @Schema(example = "0911 3324 3234", description = "Ohne Ländervorwahl")
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }

  public CareGiver email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(example = "anna.mustermann@email.de", description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public CareGiver archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

   /**
   * Kennzeichen ob Patientenkontakt archiviert ist oder nicht
   * @return archived
  **/
  @Schema(example = "true", description = "Kennzeichen ob Patientenkontakt archiviert ist oder nicht")
  public Boolean isArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }

  public CareGiver timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Der Zeitstempel der letzten Änderung
   * @return timestamp
  **/
  @Schema(example = "2019-11-28T08:37:39.637Z", description = "Der Zeitstempel der letzten Änderung")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CareGiver careGiver = (CareGiver) o;
    return Objects.equals(this._id, careGiver._id) &&
        Objects.equals(this.customerId, careGiver.customerId) &&
        Objects.equals(this.type, careGiver.type) &&
        Objects.equals(this.isLegalCarer, careGiver.isLegalCarer) &&
        Objects.equals(this.gender, careGiver.gender) &&
        Objects.equals(this.title, careGiver.title) &&
        Objects.equals(this.firstName, careGiver.firstName) &&
        Objects.equals(this.lastName, careGiver.lastName) &&
        Objects.equals(this.address, careGiver.address) &&
        Objects.equals(this.postalCode, careGiver.postalCode) &&
        Objects.equals(this.city, careGiver.city) &&
        Objects.equals(this.phone, careGiver.phone) &&
        Objects.equals(this.mobilePhone, careGiver.mobilePhone) &&
        Objects.equals(this.fax, careGiver.fax) &&
        Objects.equals(this.email, careGiver.email) &&
        Objects.equals(this.archived, careGiver.archived) &&
        Objects.equals(this.timestamp, careGiver.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_id, customerId, type, isLegalCarer, gender, title, firstName, lastName, address, postalCode, city, phone, mobilePhone, fax, email, archived, timestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CareGiver {\n");
    
    sb.append("    _id: ").append(toIndentedString(_id)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isLegalCarer: ").append(toIndentedString(isLegalCarer)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
