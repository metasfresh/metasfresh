/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.19.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.metas.camel.externalsystems.ebay.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This type defines the monetary value of an amount. It can provide the amount in both the currency used on the eBay site where an item is being offered and the conversion of that value into another currency, if applicable.
 */
@ApiModel(description = "This type defines the monetary value of an amount. It can provide the amount in both the currency used on the eBay site where an item is being offered and the conversion of that value into another currency, if applicable.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-07-20T14:45:55.981728+02:00[Europe/Berlin]")
public class Amount
{
	public static final String SERIALIZED_NAME_CONVERTED_FROM_CURRENCY = "convertedFromCurrency";
	@SerializedName(SERIALIZED_NAME_CONVERTED_FROM_CURRENCY)
	private String convertedFromCurrency;

	public static final String SERIALIZED_NAME_CONVERTED_FROM_VALUE = "convertedFromValue";
	@SerializedName(SERIALIZED_NAME_CONVERTED_FROM_VALUE)
	private String convertedFromValue;

	public static final String SERIALIZED_NAME_CURRENCY = "currency";
	@SerializedName(SERIALIZED_NAME_CURRENCY)
	private String currency;

	public static final String SERIALIZED_NAME_VALUE = "value";
	@SerializedName(SERIALIZED_NAME_VALUE)
	private String value;

	public Amount convertedFromCurrency(String convertedFromCurrency)
	{

		this.convertedFromCurrency = convertedFromCurrency;
		return this;
	}

	/**
	 * A three-letter ISO 4217 code that indicates the currency of the amount in the convertedFromValue field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum&#39;&gt;eBay API
	 * documentation&lt;/a&gt;
	 * 
	 * @return convertedFromCurrency
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "A three-letter ISO 4217 code that indicates the currency of the amount in the convertedFromValue field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum'>eBay API documentation</a>")

	public String getConvertedFromCurrency()
	{
		return convertedFromCurrency;
	}

	public void setConvertedFromCurrency(String convertedFromCurrency)
	{
		this.convertedFromCurrency = convertedFromCurrency;
	}

	public Amount convertedFromValue(String convertedFromValue)
	{

		this.convertedFromValue = convertedFromValue;
		return this;
	}

	/**
	 * The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is required or returned only if currency conversion/localization is required. The value field contains the converted amount of this value, in the currency specified by the currency field.
	 * 
	 * @return convertedFromValue
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is required or returned only if currency conversion/localization is required. The value field contains the converted amount of this value, in the currency specified by the currency field.")

	public String getConvertedFromValue()
	{
		return convertedFromValue;
	}

	public void setConvertedFromValue(String convertedFromValue)
	{
		this.convertedFromValue = convertedFromValue;
	}

	public Amount currency(String currency)
	{

		this.currency = currency;
		return this;
	}

	/**
	 * A three-letter ISO 4217 code that indicates the currency of the amount in the value field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the value field. Default: The default currency of the eBay marketplace that hosts the listing. For implementation help, refer to &lt;a
	 * href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
	 * 
	 * @return currency
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "A three-letter ISO 4217 code that indicates the currency of the amount in the value field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the value field. Default: The default currency of the eBay marketplace that hosts the listing. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/ba:CurrencyCodeEnum'>eBay API documentation</a>")

	public String getCurrency()
	{
		return currency;
	}

	public void setCurrency(String currency)
	{
		this.currency = currency;
	}

	public Amount value(String value)
	{

		this.value = value;
		return this;
	}

	/**
	 * The monetary amount, in the currency specified by the currency field. If currency conversion/localization is required, this value is the converted amount, and the convertedFromValue field contains the amount in the original currency. Required in the amount type.
	 * 
	 * @return value
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "The monetary amount, in the currency specified by the currency field. If currency conversion/localization is required, this value is the converted amount, and the convertedFromValue field contains the amount in the original currency. Required in the amount type.")

	public String getValue()
	{
		return value;
	}

	public void setValue(String value)
	{
		this.value = value;
	}

	@Override
	public boolean equals(Object o)
	{
		if (this == o)
		{
			return true;
		}
		if (o == null || getClass() != o.getClass())
		{
			return false;
		}
		Amount amount = (Amount)o;
		return Objects.equals(this.convertedFromCurrency, amount.convertedFromCurrency) &&
				Objects.equals(this.convertedFromValue, amount.convertedFromValue) &&
				Objects.equals(this.currency, amount.currency) &&
				Objects.equals(this.value, amount.value);
	}

	@Override
	public int hashCode()
	{
		return Objects.hash(convertedFromCurrency, convertedFromValue, currency, value);
	}

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
		sb.append("class Amount {\n");
		sb.append("    convertedFromCurrency: ").append(toIndentedString(convertedFromCurrency)).append("\n");
		sb.append("    convertedFromValue: ").append(toIndentedString(convertedFromValue)).append("\n");
		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    value: ").append(toIndentedString(value)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o)
	{
		if (o == null)
		{
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
