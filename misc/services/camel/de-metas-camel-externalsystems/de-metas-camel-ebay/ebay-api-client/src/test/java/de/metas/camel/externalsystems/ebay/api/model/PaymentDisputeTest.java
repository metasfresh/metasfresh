/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * The version of the OpenAPI document: v1.19.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.metas.camel.externalsystems.ebay.api.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.metas.camel.externalsystems.ebay.api.model.DisputeEvidence;
import de.metas.camel.externalsystems.ebay.api.model.EvidenceRequest;
import de.metas.camel.externalsystems.ebay.api.model.InfoFromBuyer;
import de.metas.camel.externalsystems.ebay.api.model.MonetaryTransaction;
import de.metas.camel.externalsystems.ebay.api.model.OrderLineItems;
import de.metas.camel.externalsystems.ebay.api.model.PaymentDisputeOutcomeDetail;
import de.metas.camel.externalsystems.ebay.api.model.ReturnAddress;
import de.metas.camel.externalsystems.ebay.api.model.SimpleAmount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for PaymentDispute
 */
public class PaymentDisputeTest {
    private final PaymentDispute model = new PaymentDispute();

    /**
     * Model tests for PaymentDispute
     */
    @Test
    public void testPaymentDispute() {
        // TODO: test PaymentDispute
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'availableChoices'
     */
    @Test
    public void availableChoicesTest() {
        // TODO: test availableChoices
    }

    /**
     * Test the property 'buyerProvided'
     */
    @Test
    public void buyerProvidedTest() {
        // TODO: test buyerProvided
    }

    /**
     * Test the property 'buyerUsername'
     */
    @Test
    public void buyerUsernameTest() {
        // TODO: test buyerUsername
    }

    /**
     * Test the property 'closedDate'
     */
    @Test
    public void closedDateTest() {
        // TODO: test closedDate
    }

    /**
     * Test the property 'evidence'
     */
    @Test
    public void evidenceTest() {
        // TODO: test evidence
    }

    /**
     * Test the property 'evidenceRequests'
     */
    @Test
    public void evidenceRequestsTest() {
        // TODO: test evidenceRequests
    }

    /**
     * Test the property 'lineItems'
     */
    @Test
    public void lineItemsTest() {
        // TODO: test lineItems
    }

    /**
     * Test the property 'monetaryTransactions'
     */
    @Test
    public void monetaryTransactionsTest() {
        // TODO: test monetaryTransactions
    }

    /**
     * Test the property 'openDate'
     */
    @Test
    public void openDateTest() {
        // TODO: test openDate
    }

    /**
     * Test the property 'orderId'
     */
    @Test
    public void orderIdTest() {
        // TODO: test orderId
    }

    /**
     * Test the property 'paymentDisputeId'
     */
    @Test
    public void paymentDisputeIdTest() {
        // TODO: test paymentDisputeId
    }

    /**
     * Test the property 'paymentDisputeStatus'
     */
    @Test
    public void paymentDisputeStatusTest() {
        // TODO: test paymentDisputeStatus
    }

    /**
     * Test the property 'reason'
     */
    @Test
    public void reasonTest() {
        // TODO: test reason
    }

    /**
     * Test the property 'resolution'
     */
    @Test
    public void resolutionTest() {
        // TODO: test resolution
    }

    /**
     * Test the property 'respondByDate'
     */
    @Test
    public void respondByDateTest() {
        // TODO: test respondByDate
    }

    /**
     * Test the property 'returnAddress'
     */
    @Test
    public void returnAddressTest() {
        // TODO: test returnAddress
    }

    /**
     * Test the property 'revision'
     */
    @Test
    public void revisionTest() {
        // TODO: test revision
    }

    /**
     * Test the property 'sellerResponse'
     */
    @Test
    public void sellerResponseTest() {
        // TODO: test sellerResponse
    }

}
