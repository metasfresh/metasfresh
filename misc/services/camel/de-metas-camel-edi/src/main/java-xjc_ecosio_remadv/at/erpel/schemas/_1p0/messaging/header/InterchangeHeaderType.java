//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package at.erpel.schemas._1p0.messaging.header;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for InterchangeHeaderType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="InterchangeHeaderType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="SyntaxIdentifier" type="{http://erpel.at/schemas/1p0/messaging/header}SyntaxIdentifierType" minOccurs="0"/>
 *         <element name="Sender" type="{http://erpel.at/schemas/1p0/messaging/header}SenderType"/>
 *         <element name="Recipient" type="{http://erpel.at/schemas/1p0/messaging/header}RecipientType"/>
 *         <element name="DateTime" type="{http://erpel.at/schemas/1p0/messaging/header}DateTimeType"/>
 *         <element name="ControlRef" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="RecipientRef" type="{http://erpel.at/schemas/1p0/messaging/header}RecipientRefType" minOccurs="0"/>
 *         <element name="ApplicationRef" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="ProcessingPriorityCode" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="AckRequest" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="AgreementId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="TestIndicator" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "InterchangeHeaderType", propOrder = {
    "syntaxIdentifier",
    "sender",
    "recipient",
    "dateTime",
    "controlRef",
    "recipientRef",
    "applicationRef",
    "processingPriorityCode",
    "ackRequest",
    "agreementId",
    "testIndicator"
})
public class InterchangeHeaderType {

    /**
     * Coded identification of the agency controlling the syntax, and of the character repertoire used in an EDIFACT interchange.
     * 
     */
    @XmlElement(name = "SyntaxIdentifier")
    protected SyntaxIdentifierType syntaxIdentifier;
    /**
     * Identification of the sender of the interchange.
     * 
     */
    @XmlElement(name = "Sender", required = true)
    protected SenderType sender;
    /**
     * Identification of the recipient of the interchange.
     * 
     */
    @XmlElement(name = "Recipient", required = true)
    protected RecipientType recipient;
    /**
     * Date and time of preparation of the interchange.
     * 
     */
    @XmlElement(name = "DateTime", required = true)
    protected DateTimeType dateTime;
    /**
     * Unique reference assigned by the sender to an interchange.
     * 
     */
    @XmlElement(name = "ControlRef")
    protected String controlRef;
    /**
     * A reference as agreed between the communicating partners.
     * 
     */
    @XmlElement(name = "RecipientRef")
    protected RecipientRefType recipientRef;
    /**
     * Identification of the application area assigned by the sender, to which the messages in the interchange relate e.g. the message type, if all the messages in the interchange are of the same type.
     * 
     */
    @XmlElement(name = "ApplicationRef")
    protected String applicationRef;
    /**
     * Code determined by the sender requesting processing priority for the interchange.
     * 
     */
    @XmlElement(name = "ProcessingPriorityCode")
    protected String processingPriorityCode;
    /**
     * Code requesting acknowledgement for the interchange.
     * 
     */
    @XmlElement(name = "AckRequest")
    protected String ackRequest;
    /**
     * Identification by name or code of the type of agreement under which the interchange takes place.
     * 
     */
    @XmlElement(name = "AgreementId")
    protected String agreementId;
    /**
     * This flag is used to indicate that the message serves for test purposes.
     * 
     */
    @XmlElement(name = "TestIndicator")
    protected String testIndicator;

    /**
     * Coded identification of the agency controlling the syntax, and of the character repertoire used in an EDIFACT interchange.
     * 
     * @return
     *     possible object is
     *     {@link SyntaxIdentifierType }
     *     
     */
    public SyntaxIdentifierType getSyntaxIdentifier() {
        return syntaxIdentifier;
    }

    /**
     * Sets the value of the syntaxIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link SyntaxIdentifierType }
     *     
     * @see #getSyntaxIdentifier()
     */
    public void setSyntaxIdentifier(SyntaxIdentifierType value) {
        this.syntaxIdentifier = value;
    }

    /**
     * Identification of the sender of the interchange.
     * 
     * @return
     *     possible object is
     *     {@link SenderType }
     *     
     */
    public SenderType getSender() {
        return sender;
    }

    /**
     * Sets the value of the sender property.
     * 
     * @param value
     *     allowed object is
     *     {@link SenderType }
     *     
     * @see #getSender()
     */
    public void setSender(SenderType value) {
        this.sender = value;
    }

    /**
     * Identification of the recipient of the interchange.
     * 
     * @return
     *     possible object is
     *     {@link RecipientType }
     *     
     */
    public RecipientType getRecipient() {
        return recipient;
    }

    /**
     * Sets the value of the recipient property.
     * 
     * @param value
     *     allowed object is
     *     {@link RecipientType }
     *     
     * @see #getRecipient()
     */
    public void setRecipient(RecipientType value) {
        this.recipient = value;
    }

    /**
     * Date and time of preparation of the interchange.
     * 
     * @return
     *     possible object is
     *     {@link DateTimeType }
     *     
     */
    public DateTimeType getDateTime() {
        return dateTime;
    }

    /**
     * Sets the value of the dateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimeType }
     *     
     * @see #getDateTime()
     */
    public void setDateTime(DateTimeType value) {
        this.dateTime = value;
    }

    /**
     * Unique reference assigned by the sender to an interchange.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getControlRef() {
        return controlRef;
    }

    /**
     * Sets the value of the controlRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getControlRef()
     */
    public void setControlRef(String value) {
        this.controlRef = value;
    }

    /**
     * A reference as agreed between the communicating partners.
     * 
     * @return
     *     possible object is
     *     {@link RecipientRefType }
     *     
     */
    public RecipientRefType getRecipientRef() {
        return recipientRef;
    }

    /**
     * Sets the value of the recipientRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link RecipientRefType }
     *     
     * @see #getRecipientRef()
     */
    public void setRecipientRef(RecipientRefType value) {
        this.recipientRef = value;
    }

    /**
     * Identification of the application area assigned by the sender, to which the messages in the interchange relate e.g. the message type, if all the messages in the interchange are of the same type.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getApplicationRef() {
        return applicationRef;
    }

    /**
     * Sets the value of the applicationRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getApplicationRef()
     */
    public void setApplicationRef(String value) {
        this.applicationRef = value;
    }

    /**
     * Code determined by the sender requesting processing priority for the interchange.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProcessingPriorityCode() {
        return processingPriorityCode;
    }

    /**
     * Sets the value of the processingPriorityCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getProcessingPriorityCode()
     */
    public void setProcessingPriorityCode(String value) {
        this.processingPriorityCode = value;
    }

    /**
     * Code requesting acknowledgement for the interchange.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAckRequest() {
        return ackRequest;
    }

    /**
     * Sets the value of the ackRequest property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getAckRequest()
     */
    public void setAckRequest(String value) {
        this.ackRequest = value;
    }

    /**
     * Identification by name or code of the type of agreement under which the interchange takes place.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAgreementId() {
        return agreementId;
    }

    /**
     * Sets the value of the agreementId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getAgreementId()
     */
    public void setAgreementId(String value) {
        this.agreementId = value;
    }

    /**
     * This flag is used to indicate that the message serves for test purposes.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTestIndicator() {
        return testIndicator;
    }

    /**
     * Sets the value of the testIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getTestIndicator()
     */
    public void setTestIndicator(String value) {
        this.testIndicator = value;
    }

}
