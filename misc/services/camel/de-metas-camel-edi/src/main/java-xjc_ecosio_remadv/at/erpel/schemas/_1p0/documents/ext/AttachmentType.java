//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package at.erpel.schemas._1p0.documents.ext;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for AttachmentType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="AttachmentType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element ref="{http://erpel.at/schemas/1p0/documents/ext}Name"/>
 *         <element ref="{http://erpel.at/schemas/1p0/documents/ext}Description" minOccurs="0"/>
 *         <element ref="{http://erpel.at/schemas/1p0/documents/ext}MimeType"/>
 *         <element ref="{http://erpel.at/schemas/1p0/documents/ext}AttachmentData"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AttachmentType", propOrder = {
    "name",
    "description",
    "mimeType",
    "attachmentData"
})
public class AttachmentType {

    /**
     * Name of the attachment.
     * 
     */
    @XmlElement(name = "Name", required = true)
    protected String name;
    /**
     * Free text description of the attachment.
     * 
     */
    @XmlElement(name = "Description")
    protected String description;
    /**
     * The MIME type of the attachment. E.g., 'application/pdf' for PDF attachments.
     * 
     */
    @XmlElement(name = "MimeType", required = true)
    protected String mimeType;
    /**
     * The actual attachment data as base64-encoded String.
     * 
     */
    @XmlElement(name = "AttachmentData", required = true)
    protected byte[] attachmentData;

    /**
     * Name of the attachment.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getName()
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Free text description of the attachment.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getDescription()
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * The MIME type of the attachment. E.g., 'application/pdf' for PDF attachments.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMimeType() {
        return mimeType;
    }

    /**
     * Sets the value of the mimeType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getMimeType()
     */
    public void setMimeType(String value) {
        this.mimeType = value;
    }

    /**
     * The actual attachment data as base64-encoded String.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getAttachmentData() {
        return attachmentData;
    }

    /**
     * Sets the value of the attachmentData property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     * @see #getAttachmentData()
     */
    public void setAttachmentData(byte[] value) {
        this.attachmentData = value;
    }

}
