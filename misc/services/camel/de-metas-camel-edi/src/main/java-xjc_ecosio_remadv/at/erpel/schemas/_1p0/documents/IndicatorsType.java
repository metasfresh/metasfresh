//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package at.erpel.schemas._1p0.documents;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for IndicatorsType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="IndicatorsType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="ProcessingIndicator" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="CriticalStockCode" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IndicatorsType", propOrder = {
    "processingIndicator",
    "criticalStockCode"
})
public class IndicatorsType {

    /**
     * Provides coded information about the forecast item
     * E.g. 
     *  36 Changed information (used for Ship Direct suppliers)
     *  37 Complete information
     * or in case of Plastic Omnium
     *  1 = Firm
     *  4 = Planning/forecast
     * 
     */
    @XmlElement(name = "ProcessingIndicator")
    protected String processingIndicator;
    /**
     * Identifies an item with a critical stock amount. These items must be treated with high priority.
     * 
     */
    @XmlElement(name = "CriticalStockCode")
    protected String criticalStockCode;

    /**
     * Provides coded information about the forecast item
     * E.g. 
     *  36 Changed information (used for Ship Direct suppliers)
     *  37 Complete information
     * or in case of Plastic Omnium
     *  1 = Firm
     *  4 = Planning/forecast
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProcessingIndicator() {
        return processingIndicator;
    }

    /**
     * Sets the value of the processingIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getProcessingIndicator()
     */
    public void setProcessingIndicator(String value) {
        this.processingIndicator = value;
    }

    /**
     * Identifies an item with a critical stock amount. These items must be treated with high priority.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCriticalStockCode() {
        return criticalStockCode;
    }

    /**
     * Sets the value of the criticalStockCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getCriticalStockCode()
     */
    public void setCriticalStockCode(String value) {
        this.criticalStockCode = value;
    }

}
