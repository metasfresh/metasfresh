//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package at.erpel.schemas._1p0.documents;

import java.math.BigDecimal;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.XmlValue;


/**
 * <p>Java class for UnitPriceType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="UnitPriceType">
 *   <simpleContent>
 *     <extension base="<http://erpel.at/schemas/1p0/documents>Decimal4Type">
 *       <attribute ref="{http://erpel.at/schemas/1p0/documents}BaseQuantity"/>
 *       <attribute ref="{http://erpel.at/schemas/1p0/documents}PriceType"/>
 *     </extension>
 *   </simpleContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "UnitPriceType", propOrder = {
    "value"
})
public class UnitPriceType {

    @XmlValue
    protected BigDecimal value;
    /**
     * Base quantity to which the unit price is related, i.e. 1, 100, etc.
     * 
     */
    @XmlAttribute(name = "BaseQuantity", namespace = "http://erpel.at/schemas/1p0/documents")
    protected BigDecimal baseQuantity;
    /**
     * Indicates whether the price is the calculation net (including allowances/charges, excluding taxes) or the calculation gross price (excluding allowances/charges/taxes) . If this attribute is not specified the UnitPrice is considered as calculation gross price.
     * 
     */
    @XmlAttribute(name = "PriceType", namespace = "http://erpel.at/schemas/1p0/documents")
    protected PriceTypeType priceType;

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setValue(BigDecimal value) {
        this.value = value;
    }

    /**
     * Base quantity to which the unit price is related, i.e. 1, 100, etc.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getBaseQuantity() {
        return baseQuantity;
    }

    /**
     * Sets the value of the baseQuantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     * @see #getBaseQuantity()
     */
    public void setBaseQuantity(BigDecimal value) {
        this.baseQuantity = value;
    }

    /**
     * Indicates whether the price is the calculation net (including allowances/charges, excluding taxes) or the calculation gross price (excluding allowances/charges/taxes) . If this attribute is not specified the UnitPrice is considered as calculation gross price.
     * 
     * @return
     *     possible object is
     *     {@link PriceTypeType }
     *     
     */
    public PriceTypeType getPriceType() {
        return priceType;
    }

    /**
     * Sets the value of the priceType property.
     * 
     * @param value
     *     allowed object is
     *     {@link PriceTypeType }
     *     
     * @see #getPriceType()
     */
    public void setPriceType(PriceTypeType value) {
        this.priceType = value;
    }

}
