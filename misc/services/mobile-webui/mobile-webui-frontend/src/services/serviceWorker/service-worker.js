// import { globalStore } from './index';
// import { networkStatusOffline, networkStatusOnline } from './actions/NetworkActions';

import * as strategies from 'workbox-strategies';

/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// eslint-disable-next-line no-restricted-globals
const ignored = self.__WB_MANIFEST; // this is required as cra during build time looks for this, it needs to be present (!)
console.log('[ServiceWorker] - What Workbox would inject during compile time:', ignored);

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// precacheAndRoute(self.__WB_MANIFEST) // - this is how it use to be to precache everything (!) - not needed in our case
// during compile time WP injects in here all the files. Put here just index and config.
// will do further customisation in next commits

precacheAndRoute([
  { revision: null, url: '/mobile/index.html' },
  { revision: null, url: '/mobile/config.js' },
  { revision: null, url: '/mobile/manifest.json' },
  { revision: null, url: '/mobile/favicon.ico' },
  { revision: null, url: '/mobile/logo192.png' },
  { revision: null, url: '/mobile/logo512.png' },
]);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  // createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
  createHandlerBoundToURL('./index.html')
);

// Rules samples -> https://developers.google.com/web/tools/workbox/guides/route-requests
registerRoute(new RegExp('.+\\.js$'), new strategies.CacheFirst());

// Rules samples -> https://developers.google.com/web/tools/workbox/guides/route-requests
registerRoute(new RegExp('.+\\.css$'), new strategies.CacheFirst());

// Routes for which network connectivity is imperative
registerRoute(new RegExp('.+/auth$'), new strategies.NetworkOnly());
registerRoute(new RegExp('.+/launchers$'), new strategies.NetworkOnly());
registerRoute(new RegExp('.+/version$'), new strategies.NetworkOnly());
registerRoute(new RegExp('stomp'), new strategies.NetworkOnly());

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

console.log('[ServiceWorker] waking up!');

self.addEventListener('install', function () {
  console.log('[ServiceWorker] New one installed!');
  // Force refreshing the sw on install
  if (self.skipWaiting) {
    self.skipWaiting();
  }
});

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

//const cacheVersion = '0.0.3';

const broadcast = new BroadcastChannel('network-status-channel');

// Any other custom service worker logic can go here.
self.addEventListener('fetch', (event) => {
  // Prevent the default, and handle the request ourselves.
  event.respondWith(
    (async function () {
      // If we didn't find a match in the cache, use the network.
      if (event.request.url.startsWith('http')) {
        // rules specific to endpoints
        if (event.request.url.endsWith('launchers')) {
          return fetch(event.request).catch(function (response) {
            // offline launchers work only in online mode
            console.log('Launchers error:', response);
          });
        }

        // Try to get the response from a cache.
        const cachedResponse = await caches.match(event.request);
        // Return it if we found one.
        if (cachedResponse) {
          console.log('[ServiceWorkerCache]:', event.request.url);
          console.log('[CachedResponse]:', cachedResponse);
          return cachedResponse;
        }

        return fetch(event.request)
          .then(function (responseNetwork) {
            console.log('NetworkResponse:', responseNetwork);
            if (!responseNetwork.ok) {
              if (responseNetwork.status === 400) {
                // not triggering offline status - as this is  what we get for example on bad authentication (/auth)
              } else {
                // here we should have a routine to record the offline request and retry it later
                throw new TypeError({ status: responseNetwork.status, message: 'OFFLINE_DETECTED' });
              }
            }
            // put in cache only if correct status
            // caches.open(cacheVersion).then(function (cache) {
            //   cache.put(event.request, responseNetwork);
            // });
            return responseNetwork;
          })
          .catch(function (responseNetworkErr) {
            console.log('%c[ OFFLINE ] - You appear to be offline now !!!', 'color: #7F00FF');
            broadcast.postMessage({ payload: 'offline' });

            console.log('FailResponse:', responseNetworkErr);
          });
      }
    })()
  );
});

// Self-Cleaning Service Worker Removal Routine
// Just like registering a service worker does not immediately take control of the registering page,
// removal must wait for clients to refresh before unregistering.
self.addEventListener('activate', function () {
  console.log('[ServiceWorker] New one activated!');
});
