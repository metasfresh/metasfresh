# docker-compose.yml file

services:
  db:
    build:
      context: db
      args:
        DB_DOCKER_IMG: ${DB_DOCKER_IMG}
    image: docker-db
    container_name: ${BRANCH_NAME}_db
    #restart: always #avoid restart on docker restart, because we use 1 instance per customer now
    volumes:
      - metasfresh_postgres:/var/lib/postgresql/data
    environment:
      - METASFRESH_USERNAME=metasfresh
      - METASFRESH_PASSWORD=metasfresh
      - METASFRESH_DBNAME=metasfresh
      - DB_SYSPASS=System
      - POSTGRES_PASSWORD=ip2LmNzXX8p8iXg9lZTWEJ9524kQDbXFudB7LR03T-xK9fLweX3TLMkA2AYcEiaS
      - PGDATA=/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: pg_isready -h localhost -U metasfresh -d metasfresh -t 1
      interval: 5s
      timeout: 2s
      start_period: 10s
      retries: 120
    deploy:
      mode: replicated
      replicas: 1

  postgrest:
    build: postgrest
    image: docker-postgrest
    container_name: ${BRANCH_NAME}_postgrest
    environment:
      PGRST_DB_URI: postgres://metasfresh:metasfresh@db:5432/metasfresh
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: metasfresh
    ports:
      - "${POSTGREST_PORT}:3000"
    depends_on:
      db:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      mode: replicated
      replicas: 1

  rabbitmq:
    build: rabbitmq
    image: rabbitmq
    container_name: ${BRANCH_NAME}_rabbitmq
    expose:
      - "${RABBITMQ_PORT}"
      - "${RABBITMQ_MGMT_PORT}"
    #restart: always #avoid restart on docker restart, because we use 1 instance per customer now
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MGMT_PORT}:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      mode: replicated
      replicas: 1


  search:
    build: search
    image: docker-search
    container_name: ${BRANCH_NAME}_search
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    ports:
      - "${SEARCH_PORT}:9200"
    volumes:
      - metasfresh_elasticsearch:/usr/share/elasticsearch/data
    environment:
      - "ES_JAVA_OPTS=-Xms128M -Xmx256m"
    #restart: always #avoid restart on docker restart, because we use 1 docker-compose per customer now

  papercut-smtp:
    build: papercut-smtp
    image: docker-papercut-smtp
    container_name: ${BRANCH_NAME}_papercut-smtp
    ports:
      - "${PAPERCUT_SMTP_PORT}:25"
      - "${PAPERCUT_MGMT_PORT}:37408"
volumes:
  metasfresh_postgres:
    name: ${BRANCH_NAME}_metasfresh_postgres
  metasfresh_elasticsearch:
    name: ${BRANCH_NAME}_metasfresh_elasticsearch
