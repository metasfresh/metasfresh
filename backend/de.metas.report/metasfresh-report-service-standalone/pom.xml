<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<artifactId>metasfresh-report</artifactId>
		<groupId>de.metas.report</groupId>
		<version>10.0.0</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<version>10.0.0</version>
	<artifactId>metasfresh-report-service-standalone</artifactId>

	<properties>
		<start-class>de.metas.report.ReportServiceMain</start-class>
		<metasfresh.version>[1,10.0.0]</metasfresh.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Import dependency management from Spring Boot -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<dependencies>
		<dependency>
			<groupId>de.metas.report</groupId>
			<artifactId>metasfresh-report-service</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>
	
		<!-- when making the docker image, it shall automatically look for custom SQL scripts and do a migration 
		but the migration.cli shall just be in the docker image, not in the metasfresh-report super.jar-->
		<dependency>
			<groupId>de.metas.migration</groupId>
			<artifactId>de.metas.migration.cli</artifactId>
			<version>${metasfresh.version}</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>

		<!-- Logging  -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
		</dependency>

		<!-- Q/R code-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>metasfresh-report-service</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<executions>
					<execution>
						<id>spring-boot-serverRoot-create-executable-jar</id>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<!-- we *also* need the normal main jar to be used in app
							so don't replace the normal jar, but create the executable jar with this classifier -->
							<classifier>standalone</classifier>

							<executable>true</executable>
							<mainClass>${start-class}</mainClass>
							
							<!-- despite the "provided" in the dependency declaration, migration.cli did ended up in the reports's classpath
								Therefore, we now explicitly exclude it here -->
							<excludes>
								<exclude>
									<groupId>de.metas.migration</groupId>
									<artifactId>de.metas.migration.cli</artifactId>
								</exclude>
							</excludes>
							
							<!-- this also provides the super-jar to the successive docker build 
								Note that the ${docker.build.directory} property  is set by the prepare-docker profile 
								that is activated by the presence of the scr/main/docker folder -->
							<outputDirectory>${docker.build.directory}</outputDirectory>

							<!-- layout=ZIP still creates an executable jar, but with org.springframework.boot.loader.PropertiesLauncher
								 That way we can specify external jars which contain private user specific fonts
								 See issue: https://github.com/metasfresh/metasfresh/issues/2932 
		    					 Also see https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-property-launcher-features -->
							<layout>ZIP</layout>
						</configuration>
					</execution>

					<execution>
						<id>spring-boot-serverRoot-build-info</id>
						<goals>
							<goal>build-info</goal> <!-- create build-info.properties; thanks to https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-build-info -->
						</goals>
						<configuration>
							<additionalProperties>
								<jenkinsBuildNo>${env.BUILD_NUMBER}</jenkinsBuildNo>
								<jenkinsBuildTag>${env.BUILD_TAG}</jenkinsBuildTag>
								<jenkinsBuildUrl>${env.BUILD_URL}</jenkinsBuildUrl>
								<jenkinsJobName>${env.JOB_NAME}</jenkinsJobName>
							</additionalProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<configuration>
					<rules>
						<banDuplicateClasses>
							<dependencies>
								<dependency>
									<groupId>de.metas.migration</groupId>
									<artifactId>de.metas.migration.cli</artifactId>
									<ignoreClasses>
										<ignoreClass>*</ignoreClass>
									</ignoreClasses>
								</dependency>
							</dependencies>
							<findAllDuplicates>true</findAllDuplicates>
						</banDuplicateClasses>
					</rules>
					<fail>true</fail>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<!-- copy the migration.cli jar
						We specified these artifacts as dependencies further up. Therefore they were already resolved and now we only need to grab 'em by the artifactid without having to specify a particular version.
					-->
					<execution>
						<id>copy-metasfresh-external-lib</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/docker/dist/install/lib</outputDirectory>
							<includeArtifactIds>de.metas.migration.cli</includeArtifactIds>
							<excludeTransitive>true</excludeTransitive>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<stripVersion>true</stripVersion>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
