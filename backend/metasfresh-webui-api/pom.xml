<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>de.metas.parent</artifactId>
		<groupId>de.metas</groupId>
		<version>10.0.0</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<!-- FRESH-271: we need an explicit version here, otherwise versions-maven-plugin 
		can't set it to another version -->
	<version>10.0.0</version>

	<groupId>de.metas.ui.web</groupId>
	<artifactId>metasfresh-webui-api</artifactId>

	<properties>
		<metasfresh.version>10.0.0</metasfresh.version>
		
		<license.name>gpl_v3</license.name>
	</properties>

	<dependencies>
		<dependency>
			<groupId>de.metas.ui.web</groupId>
			<artifactId>de.metas.ui.web.base</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>

		<dependency>
			<groupId>de.metas.servicerepair</groupId>
			<artifactId>de.metas.servicerepair.webui</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>


		<dependency>
			<groupId>de.metas.handlingunits</groupId>
			<artifactId>de.metas.handlingunits.webui</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>

		<!-- logging -->
		<!-- logstash-logback-encoder and janino are related to https://github.com/metasfresh/metasfresh/issues/1504 -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
		</dependency>
	</dependencies>

	<build>
		<finalName>metasfresh-webui-api</finalName>
		<plugins>
			<!-- See http://www.mojohaus.org/versions-maven-plugin/examples/update-properties.html 
				Note that the propery needs to be declared in the actual child poms, see 
				http://stackoverflow.com/questions/3628471/maven-versions-plugin-not-picking-up-properties-from-parent -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<includeProperties>metasfresh.version</includeProperties> <!-- for now, e.g. don't update the spring-version property -->
					<properties>
						<property>
							<name>metasfresh.version</name>
							<searchReactor>false</searchReactor>
							<autoLinkDependencies>true</autoLinkDependencies>
						</property>
					</properties>
				</configuration>
			</plugin>

			<!-- Add the generic info plus ci build info to the manifests of all jars 
				that we create -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version}</Implementation-Version>
							<jenkinsBuildNo>${env.BUILD_NUMBER}</jenkinsBuildNo>
							<jenkinsBuildTag>${env.BUILD_TAG}</jenkinsBuildTag>
							<jenkinsBuildUrl>${env.BUILD_URL}</jenkinsBuildUrl>
							<jenkinsJobName>${env.JOB_NAME}</jenkinsJobName>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-springboot-properties</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<delimiters>
								<delimiter>@</delimiter>
								<useDefaultDelimiters>false</useDefaultDelimiters>
							</delimiters>
							<outputDirectory>${project.build.directory}/classes</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>application*.properties</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<executions>
					<execution>
						<id>spring-boot-webui-api-repackage</id>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<executable>true</executable>

							<!-- this also provides the super-jar to the successive docker build 
								Note that the ${docker.build.directory} property is set by the prepare-docker 
								profile that is activated by the presence of the scr/main/docker folder -->
							<outputDirectory>${docker.build.directory}</outputDirectory>

							<!-- layout=ZIP still creates an executable jar, but with org.springframework.boot.loader.PropertiesLauncher
								That way we can specify external jars which contain additional things like cucumber tests 
								Also see https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-property-launcher-features -->
							<layout>ZIP</layout>
							
						</configuration>
					</execution>
					<execution>
						<id>spring-boot-webui-api-build-info</id>
						<goals>
							<goal>build-info</goal> <!-- create build-info.properties; thanks to https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-build-info -->
						</goals>
						<configuration>
							<additionalProperties>
								<jenkinsBuildNo>${env.BUILD_NUMBER}</jenkinsBuildNo>
								<jenkinsBuildTag>${env.BUILD_TAG}</jenkinsBuildTag>
								<jenkinsBuildUrl>${env.BUILD_URL}</jenkinsBuildUrl>
								<jenkinsJobName>${env.JOB_NAME}</jenkinsJobName>
							</additionalProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>false</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
