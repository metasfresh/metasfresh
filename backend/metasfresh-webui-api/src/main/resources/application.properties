# --------------------------------------------------------------------------------
# Build info
# --------------------------------------------------------------------------------
info.build.ciBuildNo=@env.BUILD_NUMBER@
info.build.ciBuildTag=@env.BUILD_TAG@
info.build.ciBuildUrl=@env.BUILD_URL@
info.build.ciJobName=@env.JOB_NAME@
info.build.ciGitSHA1=@env.BUILD_GIT_SHA1@

info.app.name=metasfresh-webui-api
info.app.title=metasfresh WebUI API service


# because of infrastructure-reasons it's currently not easy to make the actuator available on /actuator/info
# thx to https://www.allprogrammingtutorials.com/tutorials/mapping-boot-endpoints-to-custom-path.php on how to change it back to the way it was with spring-boot-1
# also see https://github.com/metasfresh/metasfresh/issues/10969
management.endpoints.web.base-path=/


#
# Logging
#

# logstash; see https://github.com/metasfresh/metasfresh/issues/1504
# This application sends log events to logstash, if enabled via this property. 
# Not enabled by default, because it needs some infrastruction (i.e. an ELK stack) to work. If that infrastructure is in place, use it to enable this feature via command line param or centralized config.
# If you are a dev and need a local ELK stack to benefit from logstash, take a look at https://github.com/metasfresh/metasfresh-dev/tree/master/vagrant
# Note that the application won't hang or crash if logstash is not avaiable or too slow.
logstash.enabled=false
logstash.host=localhost
logstash.port=5000

logging.level.springfox = WARN
logging.level.de.metas.ui.web.session.WebRestApiContextProvider = INFO
#logging.level.de.metas.ui.web.session.UserSession = TRACE
logging.level.de.metas.ui.web.window = INFO
logging.level.de.metas.ui.web.window.WindowConstants.logger = INFO
logging.level.de.metas.ui.web.window.controller.Execution = INFO
#
# Callouts
logging.level.org.adempiere.ad.callout.api.impl.CalloutExecutor = INFO
#
# Notifications & EventBus
logging.level.de.metas.websocket = INFO
logging.level.de.metas.ui.web.notification = INFO
logging.level.de.metas.event = INFO
#
# Processes
logging.level.de.metas.ui.web.process.ProcessInstance = INFO

#
# User session 
#
# Session timeout in seconds
# See https://github.com/metasfresh/metasfresh-webui-api/issues/770
server.session.timeout=7200

#
# Error handling
#
# see org.springframework.boot.autoconfigure.web.ErrorProperties.IncludeStacktrace
server.error.include-stacktrace=always

#
# HTTP
#
# thx to https://gainjavaknowledge.medium.com/spring-boot-file-upload-example-e5c516e681a9
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=500KB
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

#
# Debugging
#
metasfresh.webui.debug.showColumnNamesForCaption=false

#
# actuator-endpoints
#
management.endpoints.web.exposure.include=*

# --------------------------------------------------------------------------------
# Elasticsearch
# for more properties, see https://github.com/spring-projects/spring-boot/blob/v1.4.1.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchProperties.java
# --------------------------------------------------------------------------------
# Elasticsearch cluster name.
spring.data.elasticsearch.cluster-name=metasfresh
spring.data.elasticsearch.cluster-nodes=localhost:9300
#spring.data.elasticsearch.repositories.enabled=true
# NOTE: Avoid spamming the console in case there is no connection to elasticsearch. Those "Connection refused" are logged as INFO
logging.level.org.elasticsearch.client.transport=WARN
