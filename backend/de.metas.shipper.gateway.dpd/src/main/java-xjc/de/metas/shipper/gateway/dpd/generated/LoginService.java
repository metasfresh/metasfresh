
package de.metas.shipper.gateway.dpd.generated;

import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.ResponseWrapper;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.2
 * Generated source version: 3.0
 * 
 */
@WebService(name = "LoginService", targetNamespace = "http://dpd.com/common/service/LoginService/2.0")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface LoginService {


    /**
     * 
     *                 Creates an authentication token for the committed user if user name and password are valid.
     *                 The authentication token is needed for accessing other DPD Web Services.
     * 
     *                 Sample request:
     * 
     *                 SOAP:
     *                 <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
     *                 xmlns:ns="http://dpd.com/common/service/types/LoginService/2.0">
     *                 <soapenv:Header/>
     *                 <soapenv:Body>
     *                 <ns:getAuth>
     *                 <delisId><your delisId></delisId>
     *                 <password><your password></password>
     *                 <messageLanguage>de_DE</messageLanguage>
     *                 </ns:getAuth>
     *                 </soapenv:Body>
     *                 <soapenv:Envelope>
     * 
     *                 REST:
     *                 URL: <server:port><path>/LoginService/V2_0/getAuth
     *                 JSON-Data for POST-Request (for GET-Request data must send with parameter "request" and for
     *                 JSONP the Parameter "jsonpcallback" can be used, to send a padding function name):
     * 
     *                 {
     *                 "delisId" : "<your delisId>",
     *                 "password": "<your password>",
     *                 "messageLanguage":"en_EN"
     *                 }
     * 
     *                 REST-Result, without error:
     * 
     *                 {
     *                 "getAuthResponse": {"return":    {
     *                 "delisId": "<your delisId>",
     *                 "customerUid": "<your customerUid>",
     *                 "authToken": "<your authentication token>",
     *                 "depot": "<your customerUid>"
     *                 }},
     *                 "status":    {
     *                 "type": "OK",
     *                 "code": "200",
     *                 "message": "valid"
     *                 }
     *                 }
     * 
     *                 REST-Result, if an error occurred:
     * 
     *                 {"status": {
     *                 "type": "AuthenticationFault",
     *                 "code": "<Error code, e.g. LOGIN_8>",
     *                 "message": "<Error message, e.g. The combination of user and password is invalid.>"
     *                 }}
     * 
     *                 Additional REST-State on system error:
     *                 Error-Code: 100
     *                 Error-Type: SystemFault
     *                 Error-Message: <Message, which describe the error>
     *             
     * 
     * @param delisId
     * @param messageLanguage
     * @param password
     * @return
     *     returns de.metas.shipper.gateway.dpd.generated.Login
     * @throws AuthenticationFaultMsg
     */
    @WebMethod(action = "http://dpd.com/common/service/LoginService/2.0/getAuth")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAuth", targetNamespace = "http://dpd.com/common/service/types/LoginService/2.0", className = "de.metas.shipper.gateway.dpd.generated.GetAuth")
    @ResponseWrapper(localName = "getAuthResponse", targetNamespace = "http://dpd.com/common/service/types/LoginService/2.0", className = "de.metas.shipper.gateway.dpd.generated.GetAuthResponse")
    public Login getAuth(
        @WebParam(name = "delisId", targetNamespace = "")
        String delisId,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "messageLanguage", targetNamespace = "")
        String messageLanguage)
        throws AuthenticationFaultMsg
    ;

}
