ARG REFNAME=local
ARG REGISTRY=
FROM ${REGISTRY}metasfresh/metas-mvn-common:$REFNAME AS common

# first, just extract pom.xml files
FROM alpine AS poms

WORKDIR /backend
COPY backend . 

# Remove everything except `pom.xml` files to leave only the Maven project structure (POM files) needed for dependency resolution.
# This optimization allows Maven to download and cache dependencies in a separate layer before copying the actual source code.
# The POM files contain the dependency declarations that Maven needs to resolve and download dependencies, so keeping only these files is sufficient for the dependency resolution step.
RUN find . -type f ! -name "pom.xml" -exec rm -r {} \;


FROM maven:3.8.4-jdk-8 AS build

WORKDIR /backend

# get dependencies that were already gathered when we build de.metas.common
COPY --from=common /root/.m2 /root/.m2/
# the the pom.xml files we extracted above
COPY --from=poms /backend .

# get dependencies that are still missing
RUN --mount=type=secret,id=mvn-settings,dst=/root/.m2/settings.xml mvn --batch-mode de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -DfailOnErrors=true

# *now* get all the rest of the sourcecode and perform the actual build
COPY backend .

# configure maven distribution modules as not-executable
# without disrupting jenkins pipelines
# to enable repackaging version information in app and api images
RUN sed -i 's/<executable>true<\/executable>/<executable>false<\/executable>/' metasfresh-dist/serverRoot/pom.xml && sed -i 's/<executable>true<\/executable>/<executable>false<\/executable>/' metasfresh-webui-api/pom.xml

RUN --mount=type=secret,id=mvn-settings,dst=/root/.m2/settings.xml mvn  --batch-mode --quiet clean install --offline -Dmaven.gitcommitid.skip=true -DskipTests
